2003 univ dept part m l l e t m achine learning languag e toolkit 1 0 information see ` l e n e inference gbp gnu trove t hash type factor type var type variable create 27 2005 h r e f $ region graph v 1 1 2007 10 22 21 37 58 $ region graph region t hash edge region graph add region parent region child connect parent child add region parent add region child child root parent child parent child parent child add child child parent child parent child parent add parent edge add region edge parent child connect region parent region child parent child contain child add region region region region add region region index 1 illegal argument region +region+ already be different region graph region index region size 1 size region size iterator iterator region iterator iterator edge iterator edge iterator compute inference cache compute descendant descendant factor compute factor send compute counting number compute cousin compute neighbor parent compute looping message todo compute p r well descendant factor slightly inefficient recursive soln efficient iterator iterator next region region region next iterator region descendant iterator next region descendant region next factor avoid duplicate region factor add descendant factor compute looping message iterator edge iterator next region edge edge region edge next region edge iterator cousin edge cousin iterator cousin next region cousin region cousin next cousin edge iterator edge cousin child iterator edge next region cousin child region edge next cousin child || descendant contain cousin child add find edge cousin cousin child edge looping message compute region graph counting number define yedidia et al compute counting number link queue link iterator region iterator next region region region next region root queue add region queue empty region region region queue first parent cnt 0 iterator region parent iterator next region parent region next parent cnt + parent counting region counting 1 parent cnt queue add region child compute factor send iterator edge iterator next region edge edge region edge next edge initialize factor send compute cousin iterator edge iterator next region edge edge region edge next cousin t hash edge descendant cousin edge descendant cousin edge cousin add edge edge cousin cousin compute descendant iterator region iterator next region region region next region root compute descendant rec region compute descendant rec region region descendant t hash region child size region graph g infinite regress iterator region child iterator next region child region next compute descendant rec child descendant add child descendant add child descendant region descendant descendant compute neighbor parent iterator edge iterator next region edge edge region edge next edge neighbor parent l link region l edge descendant l edge iterator uncle l iterator uncle next region uncle region uncle next iterator child uncle child iterator child next region cousin region child next edge cousin contain cousin edge neighbor parent add find edge uncle cousin horrifically inefficient region edge find edge region uncle region cousin idx edge index region edge uncle cousin region edge edge get idx buffer buf buffer buf append r e g o n g r p h region iterator region iterator next region region region next buf append buf append region buf append edge iterator edge iterator next region edge edge region edge next buf append buf append edge buf append buf append edge buf append buf contain region region region contain region region graph factor contain ptl appropriate region create graph none found region region found region find region factor ptl var ptl var iterator region iterator next region region region next region var size var size region var contain var region region region region ptl add region region region region graph variable contain variable var appropriate region create graph none found region region found region find region variable var iterator region iterator next region region region next region var size 1 region var contain var region region region region var add region region region find small region contain variable region contain many extraneou variable variable region find contain region variable variable region ret iterator region iterator next region region region next region var contain variable ret || region var size ret var size ret region ret find small region contain variable region contain many extraneou variable var region find contain region var var region ret iterator region iterator next region region region next region var contain var ret || region var size ret var size ret region ret num edge edge size 