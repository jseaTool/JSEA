2003 univ dept part m l l e t m achine learning languag e toolkit 1 0 information see ` l e n e gnu trove t procedure gnu trove t procedure reflect utility useful charles sutton $ util v 1 1 2007 10 22 21 37 40 $ util util index obj 0 length i++ equal obj 1 index obj 0 length i++ obj 1 procedure proc element v t procedure proc v 0 v length i++ proc execute v procedure proc element v t procedure proc v 0 v length i++ j 0 j v length j++ proc execute v j t procedure proc v 0 v length i++ proc execute v t procedure proc v 0 v length i++ j 0 j v length j++ proc execute v j print v print 0 v length i++ print + v print v print 0 v length i++ print + v v buffer buf buffer 0 v length i++ buf append v v length 1 buf append buf v buffer buf buffer 0 v length i++ buf append v v length 1 buf append buf v buffer buf buffer 0 v length i++ buf append v v length 1 buf append buf contain additional extra space zero initialize additional extend additional ret length + additional arraycopy 0 ret 0 length ret contain additional extra space zero initialize additional extend additional ret length + additional arraycopy 0 ret 0 length ret concatenation a1 a2 a1 a2 append a1 a2 ret a1 length + a2 length arraycopy a1 0 ret 0 a1 length arraycopy a2 0 ret a1 length a2 length ret concatenation a1 a2 a1 a2 append a1 a2 ret a1 length + a2 length arraycopy a1 0 ret 0 a1 length arraycopy a2 0 ret a1 length a2 length ret single element append sparingly allocate you can easily turn linear algorithm quadratic v original elem element add append v elem ret v length + 1 arraycopy v 0 ret 0 v length ret v length elem ret single element append sparingly allocate you can easily turn linear algorithm quadratic v original elem element add append v elem ret v length + 1 arraycopy v 0 ret 0 v length ret v length elem ret single element append sparingly allocate you can easily turn linear algorithm quadratic v original elem element add length v+1 v0 v1 vn elem runtime type same he pas append v elem ret instance v get get component type v length+1 arraycopy v 0 ret 0 v length ret v length elem ret clone cloneable arr magic can cast original type instance arr get get component type arr length 0 arr length i++ arr clone time value occur count sample val count 0 0 sample length i++ sample val count++ count argmax elem best idx 1 max n e g t v e n f n t y 0 elem length i++ elem elem elem max max elem best idx best idx equal m1 m2 m1 length m2 length 0 m1 length i++ m1 length m2 length j 0 j m1 length j++ b1 m1 j b2 m2 j b1 b2 