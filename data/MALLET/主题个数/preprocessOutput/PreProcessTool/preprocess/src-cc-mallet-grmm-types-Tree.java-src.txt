2003 univ dept part m l l e t m achine learning languag e toolkit 1 0 information see ` l e n e type collection iterator type alphabet gnu trove t hash map arbitrary tree j graph j graph tree bit minimal wrt convenience function we add few here create wed oct 1 14 51 47 2003 charles sutton $ tree v 1 1 2007 10 22 21 37 44 $ tree t hash map vertex2int t hash map int2vertex parent child root tree tree constructor efficient indexing parent child tree subtree parent subtree tree tree tree tree add parent iterator subtree iterator next tree subtree tree next tree add subtree parent subtree subtree get root tree add subtree parent tree subtree child add node parent child iterator subtree get child child iterator next gchild next add subtree child subtree gchild lookup index v vertex2int get v lookup vertex idx int2vertex get idx maybe add vertex v vertex2int contain key v foo int2vertex size int2vertex add v vertex2int put v foo parent add child add foo vertex2int get v add rt root maybe add vertex rt root rt unsupport operation tree already root add node parent child id1 root root parent id1 maybe add vertex parent id1 lookup index parent 1 unsupport operation tree already root id2 maybe add vertex child old parent parent get id2 old parent old parent parent unsupport operation change parent +child+ +old parent+ +parent parent id2 parent child child get id1 child add child get parent child vertex2int contain key child parent get vertex2int get child get child parent vertex2int get parent collection unmodifiable child get convenience function root var idx lookup index var parent get idx contain v vertex2int get v 0 leaf v idx lookup index v child get idx size 0 iterator get vertex iterator int2vertex iterator get root root dump buffer buf buffer dump rec root 0 buf buf dump rec node lvl buffer buf 0 3 lvl i++ buf append buf append append node append iterator get child node iterator next child next dump rec child lvl+1 buf tree 