2003 univ dept part m l l e t m achine learning languag e toolkit 1 0 information see ` l e n e inference type type dirichlet type multinomial utility generate many useful kind random graphical model create mar 26 2005 h r e f $ random graph v 1 1 2007 10 22 21 37 49 $ random graph generate attractive value random r edge weight math ab r next gaussian edge weight e math e minus math e e minus e minus e generate mix value random r edge weight r next gaussian edge weight e math e minus math e e minus e minus e factor generate attractive random r edge weight variable v1 variable v2 math ab r next gaussian edge weight boltzmann pair factor v1 v2 2 factor generate mix random r edge weight variable v1 variable v2 r next gaussian edge weight boltzmann pair factor v1 v2 2 construct square grid size random attractive potential graph generate follow p we spin e 1 1 representation edge st single edge weight tt w st tt generate uniformly 0 exponential m representation chosen pre theta st 4 w st theta 2 \sum t n w st pre size length edge grid edge weight positive giving maximum strength r generate random number randomly generate undirect model undirect grid random attractive grid size edge weight random r undirect grid mdl undirect grid size size 2 grid top left down 0 size 1 i++ j 0 j size 1 j++ variable v mdl get j variable v mdl get + 1 j variable v down mdl get j + 1 mdl add factor generate attractive r edge weight v v mdl add factor generate attractive r edge weight v v down bottom edge 0 size 1 i++ variable v mdl get size 1 variable v mdl get + 1 size 1 mdl add factor generate attractive r edge weight v v edge 0 size 1 i++ variable v mdl get size 1 variable v down mdl get size 1 + 1 mdl add factor generate attractive r edge weight v v down node potential 0 size i++ j 0 j size j++ r next gaussian 0 0625 mdl add factor boltzmann unary factor mdl get j 2 mdl construct square grid size random repulsive potential node take value neighbor likely take opposite value graph generate follow p we spin e 1 1 representation edge st single edge weight tt w st tt generate uniformly 0 exponential m representation chosen pre theta st 4 w st theta 2 \sum t n w st pre size length edge grid edge weight positive giving maximum ansolute strength r generate random number randomly generate undirect model undirect grid random repulsive grid size edge weight random r random attractive grid size edge weight r construct square grid size random frustrate potential some potential attractive want neighbor them some repulsive want neighbor different graph generate follow p we spin e 1 1 representation edge st single edge weight tt w st tt generate uniformly 0 exponential m representation chosen pre theta st 4 w st theta 2 \sum t n w st pre size length edge grid edge weight positive giving maximum strength r generate random number randomly generate undirect model undirect grid random frustrate grid size edge weight random r undirect grid mdl undirect grid size size 2 grid top left down 0 size 1 i++ j 0 j size 1 j++ variable v mdl get j variable v mdl get i+1 j variable v down mdl get j+1 mdl add factor generate mix r edge weight v v mdl add factor generate mix r edge weight v v down bottom edge 0 size 1 i++ variable v mdl get size 1 variable v mdl get + 1 size 1 mdl add factor generate mix r edge weight v v edge 0 size 1 i++ variable v mdl get size 1 variable v down mdl get size 1 + 1 mdl add factor generate mix r edge weight v v down node potential add random node potential r mdl mdl undirect model random frustrate tree size max child edge weight random r undirect model mdl undirect model leaf variable root variable 2 leaf add root mdl num variable size variable parent variable random element leaf r num child r next max child + 1 ci 0 ci num child ci++ variable child variable 2 val generate mix value r edge weight mdl add factor parent child val leaf add child add random node potential r mdl mdl random element l random r idx r next l size obj l get idx l idx obj add random node potential random r factor graph mdl size mdl num variable 0 size i++ variable var mdl get table factor ptl random node r var mdl add factor ptl table factor random node random r variable var r next gaussian table factor ptl boltzmann unary factor var 2 ptl factor graph uniform chain length variable var variable length 0 length i++ var variable 2 factor graph mdl undirect model var 0 length 1 i++ prob 4 fill prob 1 0 mdl add factor var var + 1 prob mdl factor graph uniform grid length grid uniform factor generator length factor graph random chain random r length variable var variable length 0 length i++ var variable 2 dirichlet dirichlet dirichlet 1 1 1 1 factor graph mdl factor graph var 0 length 1 i++ multinomial m dirichlet random multinomial r prob m get value mdl add factor var var + 1 prob mdl factor generator factor next factor var var uniform factor generator factor generator factor next factor var var prob var weight fill prob 1 0 table factor var prob undirect model grid factor generator gen size undirect grid grid undirect grid size size 2 0 size x++ y 0 y size 1 y++ variable v1 grid get y variable v2 grid get y+1 var var hash var variable v1 v2 factor factor gen next factor var grid add factor factor add left edge 0 size 1 x++ y 0 y size y++ variable v1 grid get y variable v2 grid get x+1 y var var hash var variable v1 v2 factor factor gen next factor var grid add factor factor grid factor graph grid ob factor generator grid gen factor generator ob gen size var 2 size size variable grid var variable size size variable ob var variable size size 0 size i++ j 0 j size j++ grid var j variable 2 grid var j label g r +i+ +j+ ob var j variable 2 ob var j label o +i+ +j+ var add grid var j var add ob var j factor graph mdl factor graph variable var variable 0 add grid edge 0 size i++ j 0 j size j++ variable var0 grid var j size 1 variable var r grid var + 1 j hash var clique hash var variable var0 var r factor factor grid gen next factor clique mdl add factor factor j size 1 variable var grid var j + 1 hash var clique hash var variable var0 var factor factor grid gen next factor clique mdl add factor factor add ob edge 0 size i++ j 0 j size j++ variable grid var grid var j variable ob var ob var j hash var clique hash var variable grid var ob var factor factor ob gen next factor clique mdl add factor factor mdl 