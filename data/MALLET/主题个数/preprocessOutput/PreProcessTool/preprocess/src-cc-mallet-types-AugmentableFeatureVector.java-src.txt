2002 univ dept part m l l e t m achine learning languag e toolkit 1 0 information see ` l e n e mc callum type io o io input stream io output stream io serializable augmentable feature vector feature vector serializable size max index index value value max sort index index top value index unsort index xxx also constructor dense vector add appropriate functionality below binary vector pas value augmentable feature vector alphabet dict index value capacity size check index sort duplicate dict index value capacity size check index sort duplicate size max sort index already via sort index duplicate check index sort duplicate size size max sort index size 1 augmentable feature vector alphabet dict index value capacity check index sort dict index value capacity index length check index sort augmentable feature vector alphabet dict index value capacity dict index value capacity index length augmentable feature vector alphabet dict index value capacity dict index value capacity index length augmentable feature vector alphabet dict value capacity dict value capacity value length augmentable feature vector alphabet dict value dict value value length value length augmentable feature vector alphabet dict capacity binary yyy dict capacity binary ? capacity capacity 0 augmentable feature vector alphabet dict binary dict 4 binary augmentable feature vector alphabet dict dict augmentable feature vector feature vector fv alphabet fv dictionary fv index fv value fv index ? fv value length fv index length fv index ? fv value length fv index length augmentable feature vector feature f binary f get alphabet binary f size 1 0 add f get index position 1 0 augmentable feature vector alphabet dict pl binary grow alphabet dict binary pl iterator it pl numeric iterator it next it next augmentable vector +dict size + add +it get key + +it get numeric value index dict lookup index it get key grow alphabet index 0 add index it get numeric value augmentable feature vector alphabet dict pl binary dict pl binary add index present some feature vector value 1 0 beware unintend effect tt fv dictionary dictionary tt add feature vector fv loc 0 loc fv num location loc++ index fv index location loc mdredze jhu 3 5 10 value instead assume fv binary value fv value location loc location index 1 add index 1 0 add index value add feature some feature vector weight 1 0 name feature generate add prefix name original feature vector require tt fv dictionary tt equal tt dictionary tt fv feature vector add feature name prefix add generate feature name add feature vector fv prefix alphabet dict fv get alphabet loc 0 loc fv num location loc++ idx fv index location loc name dict lookup idx add prefix+oth name 1 0 add feature some feature vector weight 1 0 name feature generate add prefix name original feature vector require tt fv dictionary tt equal tt dictionary tt fv feature vector add feature name prefix add generate feature name binary tt fv tt binary add feature vector fv prefix binary binary add fv prefix alphabet dict fv get alphabet loc 0 loc fv num location loc++ idx fv index location loc val fv value location loc name dict lookup idx add prefix+oth name val aim cheap constant index add index value value value 1 0 illegal argument add 1 0 value + dictionary lookup index + +value+ binary vector index 0 index index value length length index + 10 ??? value length ??? arraycopy value 0 value 0 value length value value value index value size index value index + value size index size index+1 size index length length index length 0 length 4 index length 4 length index length 2 index length 100 length index length 3 2 length index length + 150 value value length arraycopy value 0 value 0 value length value value index length arraycopy index 0 index 0 index length index index index length +indice length+ size +size index size index value value size value size++ add key value augmentable feature vector dictionary +dictionary+ size +dictionary size index dictionary lookup index key augmentable feature vector index +key+ +index index 1 add index value add index value illegal argument add binary feature real value vector index 0 add index 1 0 num location index value length size size 1 max sort index sort index size location index index index size 1 max sort index sort index binary search index index doesn t work because unus portion 0 size i++ index index index index 1 1 value location location index value location size 1 max sort index sort index value location location index location location index location size 1 max sort index sort index location size index location location value index index value index size 1 max sort index sort index loc location index loc 0 value 1 0 value loc 0 add accumulator scale index size 1 max sort index sort index index 0 size i++ accumulator + value scale value 0 size i++ accumulator index + scale 0 size i++ accumulator index + value scale add accumulator add accumulator 1 0 value index value index size 1 max sort index sort index value index index size value index value value location index value value location location value location size value location value constant matrix clone matrix augmentable feature vector alphabet dictionary index value index length size constant matrix clone matrix zero index augmentable feature vector dictionary value length index index length arraycopy index 0 index 0 index length augmentable feature vector dictionary index value length value length value length single size index ? value length size 0 ? 0 index size 1 sparse vector sparse vector size 1 max sort index sort index augmentable feature vector sparse vector size +size sparse vector index value size size feature vector feature vector index size 1 max sort index sort index feature vector alphabet dictionary index value size size dot dense vector v index size 1 max sort index sort index ret 0 value 0 size i++ ret + v value index index 0 size i++ ret + value v value 0 size i++ ret + value v value index ret dot sparse vector v v augmentable feature vector dot augmentable feature vector v index size 1 max sort index sort index ret 0 vl 0 vnl v num location value 0 size i++ vl vnl v index location vl index vl++ vl vnl v index location vl index ret + v value location vl index 0 vnl i++ index v index location index size ret + v value location value index loc 0 loc size loc++ vl vnl v index location vl index loc vl++ vl vnl v index location vl index loc ret + value loc v value index loc ret dot augmentable feature vector v index size 1 max sort index sort index v index v size 1 v max sort index v sort index ret 0 vl 0 vnl v size value v value 0 size i++ vl vnl v index vl index vl++ vl vnl v index vl index ret + 1 0 0 size i++ vl vnl v index vl index vl++ vl vnl v index vl index ret + v value vl index 0 vnl i++ index v index location index size ret + v value location value index v value 0 size i++ vl vnl v index vl index vl++ vl vnl v index vl index ret + value 0 size i++ vl vnl v index vl index vl++ vl vnl v index vl index ret + value v value vl ret plus equal augmentable feature vector v factor index size 1 max sort index sort index v index v size 1 v max sort index v sort index vl 0 vnl v size value index v index vnl math min vnl size 0 vnl i++ value + v value v index 0 vnl i++ index v index index value length value index + v value factor index size size index+1 index v index 0 size i++ index vnl value + v value index xxx we check see there be high index v didn t get v index v value v index v value 0 size i++ vl vnl v index vl index vl++ vl vnl v index vl index value + factor xxx we check see there be high index v didn t get v index v value 0 size i++ vl vnl v index vl index vl++ vl vnl v index vl index value + v value vl factor xxx we check see there be high index v didn t get add entry location e already zero plus equal sparse vector v factor v augmentable feature vector plus equal augmentable feature vector v factor v get get name need check index size 1 max sort index sort index vl 0 value index v index index v index v value math min size v value length 0 i++ value + v value factor xxx we aren t add value index high size index v index v value index v index v value 0 v index length i++ index v index index size value index + factor xxx we aren t add value index high size index v index v value 0 v index length i++ index v index index size value index + v value factor xxx we aren t add value index high size index v index index v index v value 0 size i++ index v value length value + v value index factor xxx we aren t add value index high size index v index vnl v index length v value index v index v value 0 size i++ vl vnl v index vl index vl++ vl vnl v index vl index value + v value vl factor xxx we check see there be high index v didn t get index v index v value 0 size i++ vl vnl v index vl index vl++ vl vnl v index vl index value + v value vl factor xxx we check see there be high index v didn t get plus equal sparse vector v plus equal v 1 0 v value 0 value length i++ value v norm size 1 max sort index sort index ret 0 value size 0 size i++ ret + value ret two norm size 1 max sort index sort index ret 0 value math sqrt size 0 size i++ ret + value value math sqrt ret infinity norm size 1 max sort index sort index value 1 0 max n e g t v e n f n t y 0 size i++ math ab value max max math ab value max print v size +size+ dict size +dictionary size + value length +value length+ index length +indice length size 1 max sort index sort index print sort index index vector dense index already sort size 0 assume call constructor initialize member var size index length max sort index 1 just bubble sort efficient already mostly sort note we bubble sort forward most efficient we few additional item previously sort note we remember high index already sort max sort index note max sort index 1 here first out loop just fall immediately termination inner loop meet max sort index+1 size i++ j j 0 j index j index j 1 swap both index value f f index j index j index j 1 index j 1 f value v v value j value j value j 1 value j 1 v duplicate 0 max sort index size 1 argument zero value meaning function count them they be count elsewhere num duplicate many count yeild note relie index being sort first duplicate num duplicate index print f v duplicate 0 size i++ print + dictionary lookup index + + index num duplicate +num duplicate num duplicate 0 1 size i++ index 1 index num duplicates++ num duplicate 0 index length num duplicate 0 size +size+ index length +indice length+ num duplicate +num duplicate index size num duplicate value value ? size num duplicate index 0 index 0 index length size 0 j 0 size 1 i++ index index i+1 value value j + value index j index value value j + value j++ size 2 value value j + value i+1 index j index i+1 index index value value size num duplicate max sort index size 1 serialization serial u 1 u r r e n t e r l v e r o n 0 write output stream o write u r r e n t e r l v e r o n write size write max sort index read input stream o found read size read max sort index read 