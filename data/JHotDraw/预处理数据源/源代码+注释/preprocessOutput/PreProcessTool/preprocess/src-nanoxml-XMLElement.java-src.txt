wern randelshof 2006 05 26 replace java 1 1 collection by java 1 2 collection remove all deprecate method add method create element string name add method get attribute string name min max value add method get attribute string name value add method print writer w method write encode can be change to not encode unicode character 2006 05 02 xml element java $ revision 1 4 $ $ date 2002 03 24 10 27 59 $ $ name r e l e a s e 2 2 1 $ file is part of nano xml 2 lite copyright c 2000 2002 marc de scheemaeck all right reserve software is provide a is without any express or imply warranty in no event will the author be hold liable any damage arise from the use of software permission is grant to anyone to use software any purpose include commercial application and to alter it and redistribute it freely subject to the following restriction 1 the origin of software must not be misrepresent you must not claim that you write the original software you use software in a product an acknowledgment in the product documentation would be appreciate but is not require 2 alter source version must be plainly mark a such and must not be misrepresent a being the original software 3 notice may not be remove or alter from any source distribution nanoxml java io java util xml element is a representation of an xml object the object is able to parse xml code p d l d t b parse xml data b d t d d you can parse xml data using the following code u l c o d e xml element xml xml element b r file reader reader file reader filename xml b r xml parse from reader reader c o d e u l d d d l d l d t b retrieve attribute b d t d d you can enumerate the attribute of an element using the method link enumerate attribute name enumerate attribute name the attribute value can be retrieve using the method link get string attribute java lang string get string attribute the following example show how to list the attribute of an element u l c o d e xml element element b r iterator it element get attribute name b r it ha next b r nbsp nbsp nbsp nbsp string key string it next b r nbsp nbsp nbsp nbsp string value element get string attribute key b r nbsp nbsp nbsp nbsp system out println key + + value b r c o d e u l d d d l d l d t b retrieve child element b d t d d you can enumerate the child of an element using link iterate child iterate child the number of child iterator can be retrieve using link count child count child d d d l d l d t b element contain character data b d t d d an iterator contain character data like in the following example u l c o d e lt title gt the title lt title gt c o d e u l you can retrieve that data using the method link get content get content d d d l d l d t b subclass xml element b d t d d when subclass xml element you need to override the method link create element create element which ha to a copy of the receiver d d d l p author marc de scheemaeck lt a href mailto cyberelf mac com cyberelf mac com a gt version 2005 06 18 wern randelshof adapt java 2 collection a p i br $ name r e l e a s e 2 2 1 $ $ revision 1 4 $ see nanoxml xml parse exception xml element serialization serial version id serial version u id 6685035139346394777 l major version of nano xml with the same major and minor version are binary compatible with the same major version are source compatible the major version is different you may need to modify the client source code see n a n o xml m i n o r v e r s i o n n a n o xml m a j o r v e r s i o n 2 minor version of nano xml with the same major and minor version are binary compatible with the same major version are source compatible the major version is different you may need to modify the client source code see n a n o xml m a j o r v e r s i o n n a n o xml m i n o r v e r s i o n 2 the attribute given to the element dl dt b invariant b dt dd ul li the field can be empty li the field is nev code null code li the key set iterator and the value are string ul dd dl hash map attribute child iterator of the element dl dt b invariant b dt dd ul li the field can be empty li the field is nev code null code li the iterator are instance of code xml element code or a subclass of code xml element code ul dd dl array list child the name of the element dl dt b invariant b dt dd ul li the field is code null code iff the element is not initialize by eith parse or set name li the field is not code null code it s not empty li the field is not code null code it contain a valid xml identifier ul dd dl string name the p c d a t a content of the object dl dt b invariant b dt dd ul li the field is code null code iff the element is not a p c d a t a element li the field can be any string include the empty string ul dd dl string content conversion table amp entity the key set iterator are the entity name without the amp and delimiter dl dt b invariant b dt dd ul li the field is nev code null code li the field alway contain the following association lt nbsp gt nbsp lt gt nbsp gt nbsp gt quot nbsp gt nbsp \ apo nbsp gt nbsp amp nbsp gt nbsp amp li the key set iterator are string li the value are array ul dd dl hash map entity the line number where the element start dl dt b invariant b dt dd ul li code line nr gt 0 code ul dd dl line nr code true code the of the element and attribute name are insensitive ignore code true code the leading and trailing whitespace of p c d a t a section have to be ignore ignore whitespace character read too much character provide push back functionality to the input reader without have to use a pushback reader there is no such character field is \0 read too much the reader provide by the caller of the parse method dl dt b invariant b dt dd ul li the field is not code null code the parse method is running ul dd dl reader reader the current line number in the source content dl dt b invariant b dt dd ul li parser line nr gt 0 the parse method is running ul dd dl parser line nr wern randelshof variable is set to false unicode character are not encode into entity the encoding is left to the underlie writer is encode unicode character true create and initializ a xml element calling the construction is equivalent to ul code xml element hash map false true code ul dl dt b postcondition b dt dd ul li count child gt 0 li iterate child gt empty enumeration li enumerate property name gt empty enumeration li get child gt empty vector li get content gt li get line nr gt 0 li get name gt null ul dd dl see xml element java util hash map xml element hash map see xml element see xml element java util hash map xml element hash map xml element hash map false true true create and initializ a xml element calling the construction is equivalent to ul code xml element entity false true code ul param entity the entity conversion table dl dl dt b precondition b dt dd ul li code entity null code ul dd dl dl dt b postcondition b dt dd ul li count child gt 0 li iterate child gt empty enumeration li enumerate property name gt empty enumeration li get child gt empty vector li get content gt li get line nr gt 0 li get name gt null ul dd dl dl see xml element see xml element see xml element java util hash map xml element hash map xml element hash map entity entity false true true create and initializ a xml element calling the construction is equivalent to ul code xml element hash map skip leading whitespace true code ul param skip leading whitespace code true code leading and trailing whitespace in p c d a t a content ha to be remove dl dl dt b postcondition b dt dd ul li count child gt 0 li iterate child gt empty enumeration li enumerate property name gt empty enumeration li get child gt empty vector li get content gt li get line nr gt 0 li get name gt null ul dd dl dl see xml element see xml element java util hash map xml element hash map see xml element java util hash map xml element hash map xml element skip leading whitespace hash map skip leading whitespace true true create and initializ a xml element calling the construction is equivalent to ul code xml element entity skip leading whitespace true code ul param entity the entity conversion table param skip leading whitespace code true code leading and trailing whitespace in p c d a t a content ha to be remove dl dl dt b precondition b dt dd ul li code entity null code ul dd dl dl dt b postcondition b dt dd ul li count child gt 0 li iterate child gt empty enumeration li enumerate property name gt empty enumeration li get child gt empty vector li get content gt li get line nr gt 0 li get name gt null ul dd dl dl see xml element see xml element see xml element java util hash map xml element hash map xml element hash map entity skip leading whitespace entity skip leading whitespace true true create and initializ a xml element param entity the entity conversion table param skip leading whitespace code true code leading and trailing whitespace in p c d a t a content ha to be remove param ignore code true code the of element and attribute name have to be ignore dl dl dt b precondition b dt dd ul li code entity null code ul dd dl dl dt b postcondition b dt dd ul li count child gt 0 li iterate child gt empty enumeration li enumerate property name gt empty enumeration li get child gt empty vector li get content gt li get line nr gt 0 li get name gt null ul dd dl dl see xml element see xml element see xml element java util hash map xml element hash map see xml element java util hash map xml element hash map xml element hash map entity skip leading whitespace ignore entity skip leading whitespace true ignore create and initializ a xml element p constructor should i only i be call from link create element create element to create child iterator param entity the entity conversion table param skip leading whitespace code true code leading and trailing whitespace in p c d a t a content ha to be remove param fill basic conversion table code true code the basic entity need to be add to the entity list param ignore code true code the of element and attribute name have to be ignore dl dl dt b precondition b dt dd ul li code entity null code li code fill basic conversion table false code then code entity code contain at least the following entry code amp code code lt code code gt code code apo code and code quot code ul dd dl dl dt b postcondition b dt dd ul li count child gt 0 li iterate child gt empty enumeration li enumerate property name gt empty enumeration li get child gt empty vector li get content gt li get line nr gt 0 li get name gt null ul dd dl dl see create element xml element hash map entity skip leading whitespace fill basic conversion table ignore entity skip leading whitespace fill basic conversion table ignore true xml element hash map entity skip leading whitespace fill basic conversion table ignore encode unicode character ignore whitespace skip leading whitespace ignore ignore name null content attribute hash map child array list entity entity line nr 0 is encode unicode character encode unicode character iterator it entity key set iterator it ha next object key it next object value entity get key value string value string value to array entity put key value fill basic conversion table entity put amp entity put quot entity put apo \ entity put lt entity put gt add a child element param child the child element to add dl dl dt b precondition b dt dd ul li code child null code li code child get name null code li code child code doe not have a parent element ul dd dl dl dt b postcondition b dt dd ul li count child gt old count child + 1 li iterate child gt old iterate child + child li get child gt old iterate child + child ul dd dl dl see count child see iterate child see get child see remove child nanoxml xml element remove child xml element add child xml element child child add child add or modifie an attribute param name the name of the attribute param value the value of the attribute dl dl dt b precondition b dt dd ul li code name null code li code name code is a valid xml identifier li code value null code ul dd dl dl dt b postcondition b dt dd ul li enumerate attribute name gt old enumerate attribute name + name li get attribute name gt value ul dd dl dl set attribute string name object value ignore name name to upper attribute put name value to string add or modifie an attribute param name the name of the attribute param value the value of the attribute dl dl dt b precondition b dt dd ul li code name null code li code name code is a valid xml identifier ul dd dl dl dt b postcondition b dt dd ul li enumerate attribute name gt old enumerate attribute name + name li get attribute name gt value ul dd dl dl set attribute string name value ignore name name to upper attribute put name integer to string value add or modifie an attribute param name the name of the attribute param value the value of the attribute dl dl dt b precondition b dt dd ul li code name null code li code name code is a valid xml identifier ul dd dl dl dt b postcondition b dt dd ul li enumerate attribute name gt old enumerate attribute name + name li get attribute name gt value ul dd dl dl set attribute string name value ignore name name to upper attribute put name to string value the number of child iterator of the element dl dt b postcondition b dt dd ul li code result 0 code ul dd dl see add child nanoxml xml element add child xml element see iterate child see get child see remove child nanoxml xml element remove child xml element count child child size enumerate the attribute name dl dt b postcondition b dt dd ul li code result null code ul dd dl iterator enumerate attribute name attribute key set iterator enumerate the child iterator dl dt b postcondition b dt dd ul li code result null code ul dd dl iterator iterate child child iterator the child iterator a a array list it is safe to modify array list dl dt b postcondition b dt dd ul li code result null code ul dd dl see add child nanoxml xml element add child xml element see count child see iterate child see remove child nanoxml xml element remove child xml element array list get child array list child clone exception e nev happen howev some java compiler are so braindead that they require exception clause null the p c d a t a content of the object there is no such content c o d e null c o d e is see set content java lang string set content string string get content content the line nr in the source data on which the element is found method code 0 code there is no associate source data dl dt b postcondition b dt dd ul li code result 0 code ul dd dl get line nr line nr an attribute of the element the attribute doesn t exist code null code is param name the name of the attribute dl dl dt b precondition b dt dd ul li code name null code li code name code is a valid xml identifier ul dd dl dl object get attribute string name get attribute name null an attribute of the element the attribute doesn t exist code value code is param name the name of the attribute param value key to use the attribute is miss dl dl dt b precondition b dt dd ul li code name null code li code name code is a valid xml identifier ul dd dl dl object get attribute string name object value ignore name name to upper object value attribute get name value null value value value an attribute by looking up a key in a hashtable the attribute doesn t exist the value correspond to key is p a an example value set contain the mapping code one gt 1 code and the element contain the attribute code attr one code then code get attribute attr mapping key false code code 1 code param name the name of the attribute param value set hash map mapping key set iterator to value param key key to use the attribute is miss param allow literal code true code literal are valid dl dl dt b precondition b dt dd ul li code name null code li code name code is a valid xml identifier li code value set code null li the key set iterator of code value set code are string ul dd dl dl see set attribute java lang string java lang object set attribute string object see remove attribute java lang string remove attribute string see enumerate attribute name see get attribute java lang string get attribute string see get attribute java lang string java lang object get attribute string object object get attribute string name map value set string key allow literal ignore name name to upper object key attribute get name object result key null key key result value set get key result null allow literal result key invalid value name string key result an attribute of the element the attribute doesn t exist code null code is param name the name of the attribute dl dl dt b precondition b dt dd ul li code name null code li code name code is a valid xml identifier ul dd dl dl see set attribute java lang string java lang object set attribute string object see remove attribute java lang string remove attribute string see enumerate attribute name see get string attribute java lang string java lang string get string attribute string string see get string attribute java lang string java util hash map java lang string get string attribute string hash map string string get string attribute string name get string attribute name null an attribute of the element the attribute doesn t exist code value code is param name the name of the attribute param value key to use the attribute is miss dl dl dt b precondition b dt dd ul li code name null code li code name code is a valid xml identifier ul dd dl dl see set attribute java lang string java lang object set attribute string object see remove attribute java lang string remove attribute string see enumerate attribute name see get string attribute java lang string get string attribute string see get string attribute java lang string java util hash map java lang string get string attribute string hash map string string get string attribute string name string value string get attribute name value an attribute by looking up a key in a hashtable the attribute doesn t exist the value correspond to key is p a an example value set contain the mapping code one gt 1 code and the element contain the attribute code attr one code then code get attribute attr mapping key false code code 1 code param name the name of the attribute param value set hash map mapping key set iterator to value param key key to use the attribute is miss param allow literal code true code literal are valid dl dl dt b precondition b dt dd ul li code name null code li code name code is a valid xml identifier li code value set code null li the key set iterator of code value set code are string li the value of code value set code are string ul dd dl dl see set attribute java lang string java lang object set attribute string object see remove attribute java lang string remove attribute string see enumerate attribute name see get string attribute java lang string get string attribute string see get string attribute java lang string java lang string get string attribute string string string get string attribute string name hash map value set string key allow literal string get attribute name value set key allow literal an attribute of the element the attribute doesn t exist code 0 code is param name the name of the attribute dl dl dt b precondition b dt dd ul li code name null code li code name code is a valid xml identifier ul dd dl dl see set attribute java lang string set attribute string see enumerate attribute name see get attribute java lang string get attribute string see get attribute java lang string java util hash map java lang string get attribute string hash map string get attribute string name get attribute name 0 an attribute of the element the attribute doesn t exist code value code is param name the name of the attribute param value key to use the attribute is miss dl dl dt b precondition b dt dd ul li code name null code li code name code is a valid xml identifier ul dd dl dl see set attribute java lang string set attribute string see enumerate attribute name see get attribute java lang string get attribute string see get attribute java lang string java util hash map java lang string get attribute string hash map string get attribute string name value ignore name name to upper string value string attribute get name value null value integer parse value number format exception e invalid value name value get attribute string name min max value v get attribute name value v min min v max max v an attribute by looking up a key in a hashtable the attribute doesn t exist the value correspond to key is p a an example value set contain the mapping code one gt 1 code and the element contain the attribute code attr one code then code get attribute attr mapping key false code code 1 code param name the name of the attribute param value set hash map mapping key set iterator to value param key key to use the attribute is miss param allow literal number code true code literal number are valid dl dl dt b precondition b dt dd ul li code name null code li code name code is a valid xml identifier li code value set code null li the key set iterator of code value set code are string li the value of code value set code are integer object li code key code is eith code null code a key in code value set code or an integer ul dd dl dl see set attribute java lang string set attribute string see enumerate attribute name see get attribute java lang string get attribute string see get attribute java lang string get attribute string get attribute string name hash map value set string key allow literal number ignore name name to upper object key attribute get name integer result key null key key result integer value set get key cast exception e invalid value set name result null allow literal number invalid value name string key result integer value of string key number format exception e invalid value name string key result value an attribute of the element the attribute doesn t exist code 0 0 code is param name the name of the attribute dl dl dt b precondition b dt dd ul li code name null code li code name code is a valid xml identifier ul dd dl dl see set attribute java lang string set attribute string see enumerate attribute name see get attribute java lang string get attribute string see get attribute java lang string java util hash map java lang string get attribute string hash map string get attribute string name get attribute name 0 an attribute of the element the attribute doesn t exist code value code is param name the name of the attribute param value key to use the attribute is miss dl dl dt b precondition b dt dd ul li code name null code li code name code is a valid xml identifier ul dd dl dl see set attribute java lang string set attribute string see enumerate attribute name see get attribute java lang string get attribute string see get attribute java lang string java util hash map java lang string get attribute string hash map string get attribute string name value ignore name name to upper string value string attribute get name value null value value of value value number format exception e invalid value name value an attribute by looking up a key in a hashtable the attribute doesn t exist the value correspond to key is p a an example value set contain the mapping code one gt 1 0 code and the element contain the attribute code attr one code then code get attribute attr mapping key false code code 1 0 code param name the name of the attribute param value set hash map mapping key set iterator to value param key key to use the attribute is miss param allow literal number code true code literal number are valid dl dl dt b precondition b dt dd ul li code name null code li code name code is a valid xml identifier li code value set null code li the key set iterator of code value set code are string li the value of code value set code are object li code key code is eith code null code a key in code value set code or a ul dd dl dl see set attribute java lang string set attribute string see enumerate attribute name see get attribute java lang string get attribute string see get attribute java lang string get attribute string get attribute string name hash map value set string key allow literal number ignore name name to upper object key attribute get name result key null key key result value set get key cast exception e invalid value set name result null allow literal number invalid value name string key result value of string key number format exception e invalid value name string key result value an attribute of the element the attribute doesn t exist code value code is the value of the attribute is equal to code true value code code true code is the value of the attribute is equal to code false value code code false code is the value doesn t match code true value code or code false value code an exception is param name the name of the attribute param true value the value associate with code true code param false value the value associate with code true code param value value to use the attribute is miss dl dl dt b precondition b dt dd ul li code name null code li code name code is a valid xml identifier li code true value code and code false value code are different string ul dd dl dl see set attribute java lang string java lang object set attribute string object see remove attribute java lang string remove attribute string see enumerate attribute name get attribute string name string true value string false value value ignore name name to upper object value attribute get name value null value value equal true value true value equal false value false invalid value name string value get attribute string name value get attribute name true false value the name of the element see set name java lang string set name string string get name name read one xml element from a java io reader and pars it param reader the reader from which to retrieve the xml data dl dl dt b precondition b dt dd ul li code reader null code li code reader code is not close ul dd dl dl dt b postcondition b dt dd ul li the state of the receiver is update to reflect the xml element parse from the reader li the reader point to the first character following the last gt character of the xml element ul dd dl dl java io i o exception an error occur reading the input nanoxml xml parse exception an error occur parse the read data parse from reader reader reader i o exception xml parse exception parse from reader reader starting line nr 1 read one xml element from a java io reader and pars it param reader the reader from which to retrieve the xml data param starting line nr the line number of the first line in the data dl dl dt b precondition b dt dd ul li code reader null code li code reader code is not close ul dd dl dl dt b postcondition b dt dd ul li the state of the receiver is update to reflect the xml element parse from the reader li the reader point to the first character following the last gt character of the xml element ul dd dl dl java io i o exception an error occur reading the input nanoxml xml parse exception an error occur parse the read data parse from reader reader reader starting line nr i o exception xml parse exception name null content attribute hash map child array list read too much \0 reader reader parser line nr starting line nr ch scan whitespace ch expect input ch read ch || ch ? skip special tag 0 unread ch scan element read one xml element from a string and pars it param string the reader from which to retrieve the xml data dl dl dt b precondition b dt dd ul li code string null code li code string length gt 0 code ul dd dl dl dt b postcondition b dt dd ul li the state of the receiver is update to reflect the xml element parse from the reader ul dd dl dl nanoxml xml parse exception an error occur parse the string parse string string string xml parse exception parse from reader string reader string starting line nr 1 i o exception e java exception handling suxx read one xml element from a string and pars it param string the reader from which to retrieve the xml data param offset the first character in code string code to scan dl dl dt b precondition b dt dd ul li code string null code li code offset lt string length code li code offset gt 0 code ul dd dl dl dt b postcondition b dt dd ul li the state of the receiver is update to reflect the xml element parse from the reader ul dd dl dl nanoxml xml parse exception an error occur parse the string parse string string string offset xml parse exception parse string string substring offset read one xml element from a string and pars it param string the reader from which to retrieve the xml data param offset the first character in code string code to scan param end the character where to stop scanning character is not scan dl dl dt b precondition b dt dd ul li code string null code li code end lt string length code li code offset lt end code li code offset gt 0 code ul dd dl dl dt b postcondition b dt dd ul li the state of the receiver is update to reflect the xml element parse from the reader ul dd dl dl nanoxml xml parse exception an error occur parse the string parse string string string offset end xml parse exception parse string string substring offset end read one xml element from a string and pars it param string the reader from which to retrieve the xml data param offset the first character in code string code to scan param end the character where to stop scanning character is not scan param starting line nr the line number of the first line in the data dl dl dt b precondition b dt dd ul li code string null code li code end lt string length code li code offset lt end code li code offset gt 0 code ul dd dl dl dt b postcondition b dt dd ul li the state of the receiver is update to reflect the xml element parse from the reader ul dd dl dl nanoxml xml parse exception an error occur parse the string parse string string string offset end starting line nr xml parse exception string string substring offset end parse from reader string reader string starting line nr i o exception e java exception handling suxx read one xml element from a array and pars it param input the reader from which to retrieve the xml data param offset the first character in code string code to scan param end the character where to stop scanning character is not scan dl dl dt b precondition b dt dd ul li code input null code li code end lt input length code li code offset lt end code li code offset gt 0 code ul dd dl dl dt b postcondition b dt dd ul li the state of the receiver is update to reflect the xml element parse from the reader ul dd dl dl nanoxml xml parse exception an error occur parse the string parse array input offset end xml parse exception parse array input offset end starting line nr 1 read one xml element from a array and pars it param input the reader from which to retrieve the xml data param offset the first character in code string code to scan param end the character where to stop scanning character is not scan param starting line nr the line number of the first line in the data dl dl dt b precondition b dt dd ul li code input null code li code end lt input length code li code offset lt end code li code offset gt 0 code ul dd dl dl dt b postcondition b dt dd ul li the state of the receiver is update to reflect the xml element parse from the reader ul dd dl dl nanoxml xml parse exception an error occur parse the string parse array input offset end starting line nr xml parse exception reader reader array reader input offset end parse from reader reader starting line nr i o exception e exception will nev happen remove a child element param child the child element to remove dl dl dt b precondition b dt dd ul li code child null code li code child code is a child element of the receiver ul dd dl dl dt b postcondition b dt dd ul li count child gt old count child 1 li iterate child gt old iterate child child li get child gt old iterate child child ul dd dl dl see add child nanoxml xml element add child xml element see count child see iterate child see get child remove child xml element child child remove child remove an attribute param name the name of the attribute dl dl dt b precondition b dt dd ul li code name null code li code name code is a valid xml identifier ul dd dl dl dt b postcondition b dt dd ul li enumerate attribute name gt old enumerate attribute name name li get attribute name gt code null code ul dd dl dl remove attribute string name ignore name name to upper attribute remove name create a similar xml element xml element create element string name xml element elem create element elem set name name elem create a similar xml element p you should override method when subclass xml element xml element create element xml element entity ignore whitespace false ignore is encode unicode character change the content string param content the content string set content string content content content change the name of the element param name the name dl dl dt b precondition b dt dd ul li code name null code li code name code is a valid xml identifier ul dd dl see get name set name string name name name write the xml element to a string see write java io writer write writer string to string array output stream out array output stream output stream writer writer output stream writer out write writer writer flush string out to array i o exception e java exception handling suxx super to string write the xml element to a writer param writer the writer to write the xml data to dl dl dt b precondition b dt dd ul li code writer null code li code writer code is not close ul dd dl java io i o exception the data could not be write to the writer see to string write writer writer i o exception name null write encode writer content writer write writer write name attribute is empty iterator it attribute key set iterator it ha next writer write string key string it next string value string attribute get key writer write key writer write writer write write encode writer value writer write content null content length 0 writer write write encode writer content writer write writer write writer write name writer write child is empty writer write writer write writer write iterator it iterate child it ha next xml element child xml element it next child write writer writer write writer write writer write name writer write write the xml element to a print writer and indent the element param writer the writer to write the xml data to dl dl dt b precondition b dt dd ul li code writer null code li code writer code is not close ul dd dl java io i o exception the data could not be write to the writer see to string print print writer writer print writer 0 write the xml element to a print writer and indent the element param writer the writer to write the xml data to dl dl dt b precondition b dt dd ul li code writer null code li code writer code is not close ul dd dl param indent the indentation java io i o exception the data could not be write to the writer see to string print print writer writer indent name null write encode writer content space indent 2 array fill space writer write space writer write writer write name attribute is empty iterator enm attribute key set iterator enm ha next writer write string key string enm next string value string attribute get key writer write key writer write writer write write encode writer value writer write content null content length 0 writer write write encode writer content writer write writer write writer write name writer write child is empty writer write writer write writer write writer write iterator enm get child iterator enm ha next xml element child xml element enm next child print writer indent + 1 writer write space writer write writer write writer write name writer write writer write i o exception e internal error error internal error e get message error init cause e error write a string encode to a writer param writer the writer to write the xml data to param str the string to write encode dl dl dt b precondition b dt dd ul li code writer null code li code writer code is not close li code str null code ul dd dl write encode writer writer string str i o exception i 0 i str length i + 1 ch str at i ch writer write writer write l writer write t writer write writer write writer write g writer write t writer write writer write writer write a writer write m writer write p writer write writer write writer write q writer write u writer write o writer write t writer write \ writer write writer write a writer write p writer write o writer write s writer write unicode ch unicode 32 || is encode unicode character unicode 126 writer write writer write writer write x writer write integer to string unicode 16 writer write writer write ch scan an identifier from the current reader the scan identifier is append to code result code param result the buffer in which the scan identifier will be put dl dl dt b precondition b dt dd ul li code result null code li the next character read from the reader is a valid first character of an xml identifier ul dd dl dl dt b postcondition b dt dd ul li the next character read from the reader won t be an identifier character ul dd dl dl scan identifier string buffer result i o exception ch read ch a || ch z ch a || ch z ch 0 || ch 9 ch ch ch ch ch \u007 e unread ch result append ch method scan an identifier from the current reader the next character following the whitespace scan whitespace i o exception ch read ch \r ch method scan an identifier from the current reader the scan whitespace is append to code result code the next character following the whitespace dl dl dt b precondition b dt dd ul li code result null code ul dd dl scan whitespace string buffer result i o exception ch read ch result append ch \r ch method scan a delimit string from the current reader the scan string without delimiter is append to code string code dl dl dt b precondition b dt dd ul li code string null code li the next read is the string delimit ul dd dl scan string string buffer string i o exception delimit read delimit \ delimit expect input or \ ch read ch delimit ch resolve entity string string append ch scan a p c d a t a element c d a t a section and entity are resolve the next lt is skip the scan data is append to code data code dl dl dt b precondition b dt dd ul li code data null code ul dd dl scan p c data string buffer data i o exception ch read ch ch read ch check c d a t a data unread ch ch resolve entity data data append ch scan a special tag and the tag is a c d a t a section append it content to code buf code dl dl dt b precondition b dt dd ul li code buf null code li the first lt ha already be read ul dd dl check c d a t a string buffer buf i o exception ch read ch unread ch skip special tag 0 false check literal c d a t a skip special tag 1 one ha already be read false delimit skip 0 delimit skip 3 ch read ch delimit skip 2 delimit skip + 1 buf append buf append delimit skip 0 delimit skip 2 i 0 i delimit skip i++ buf append delimit skip 0 buf append delimit skip 3 i 0 i delimit skip i + 1 buf append buf append ch delimit skip 0 true skip a comment dl dl dt b precondition b dt dd ul li the first lt ha already be read ul dd dl skip comment i o exception dash to read 2 dash to read 0 ch read ch dash to read 1 dash to read 2 read expect input skip a special tag or comment param bracket level the number of open square bracket that have already be read dl dl dt b precondition b dt dd ul li the first lt ha already be read li code bracket level 0 code ul dd dl skip special tag bracket level i o exception tag level 1 string delimit \0 bracket level 0 ch read ch bracket level + 1 ch ch read ch bracket level + 1 ch bracket level 1 ch skip comment tag level 0 ch read string delimit \0 ch || ch \ string delimit ch bracket level 0 ch tag level + 1 ch tag level 1 ch bracket level + 1 ch bracket level 1 ch string delimit string delimit \0 scan the data literal text scanning stop when a character doe not match or after the complete text ha be check whichev come first param literal the literal to check dl dl dt b precondition b dt dd ul li code literal null code ul dd dl check literal string literal i o exception length literal length i 0 i length i + 1 read literal at i false true read a character from a reader read i o exception read too much \0 ch read too much read too much \0 ch i reader read i 0 unexpect end of data i 10 parser line nr + 1 i scan an xml element param elt the element that will contain the result dl dl dt b precondition b dt dd ul li the first lt ha already be read li code elt null code ul dd dl scan element xml element elt i o exception string buffer buf string buffer scan identifier buf string name buf to string elt set name name ch scan whitespace ch ch buf set length 0 unread ch scan identifier buf string key buf to string ch scan whitespace ch expect input unread scan whitespace buf set length 0 scan string buf elt set attribute key buf ch scan whitespace ch ch read ch expect input buf set length 0 ch scan whitespace buf ch unread ch scan p c data buf ch read ch check c d a t a buf scan p c data buf ch scan whitespace buf ch unread ch scan p c data buf ch || ignore whitespace buf set length 0 ch unread ch buf length 0 ch ch ch read ch expect input comment or element ch read ch expect input comment or element skip comment unread ch xml element child create element scan element child elt add child child ch scan whitespace ch expect input ch read unread ch ignore whitespace elt set content buf to string trim elt set content buf to string ch read ch expect input unread scan whitespace check literal name expect input name scan whitespace expect input resolve an entity the name of the entity is read from the reader the value of the entity is append to code buf code param buf where to put the entity value dl dl dt b precondition b dt dd ul li the first amp ha already be read li code buf null code ul dd dl resolve entity string buffer buf i o exception ch \0 string buffer key buf string buffer ch read ch key buf append ch string key key buf to string key at 0 key at 1 x ch integer parse key substring 2 16 ch integer parse key substring 1 10 number format exception e unknown entity key buf append ch value entity get key value null unknown entity key buf append value push a character back to the read back buffer param ch the character to push back dl dl dt b precondition b dt dd ul li the read back buffer is empty li code ch \0 code ul dd dl unread ch read too much ch create a parse exception when an invalid valueset is given to a method param name the name of the entity dl dl dt b precondition b dt dd ul li code name null code ul dd dl xml parse exception invalid value set string name string msg invalid value set entity name \ + name + \ xml parse exception get name parser line nr msg create a parse exception when an invalid value is given to a method param name the name of the entity param value the value of the entity dl dl dt b precondition b dt dd ul li code name null code li code value null code ul dd dl xml parse exception invalid value string name string value string msg attribute \ + name + \ doe not contain a valid + value \ + value + \ xml parse exception get name parser line nr msg create a parse exception when the end of the data input ha be reach xml parse exception unexpect end of data string msg unexpect end of data reach xml parse exception get name parser line nr msg create a parse exception when a syntax error occur param context the context in which the error occur dl dl dt b precondition b dt dd ul li code context null code li code context length gt 0 code ul dd dl xml parse exception syntax error string context string msg syntax error parse + context xml parse exception get name parser line nr msg create a parse exception when the next character read is not the character that wa expect param set the set of character in human readable form that wa expect dl dl dt b precondition b dt dd ul li code set null code li code set length gt 0 code ul dd dl xml parse exception expect input string set string msg expect + set xml parse exception get name parser line nr msg create a parse exception when an entity could not be resolve param name the name of the entity dl dl dt b precondition b dt dd ul li code name null code li code name length gt 0 code ul dd dl xml parse exception unknown entity string name string msg unknown or invalid entity + name + xml parse exception get name parser line nr msg 