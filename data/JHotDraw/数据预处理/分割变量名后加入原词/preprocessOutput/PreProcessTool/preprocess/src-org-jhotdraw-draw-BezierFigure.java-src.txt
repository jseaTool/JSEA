BezierFigure bezi figure java 2 2 1 1 1 1 2006 2006 06 06 08 08 Copyright copyright c c 1996 1996 2006 2006 by by the the original original authors author of of JHotDraw jhotdraw and and all all its it contributors contributor JHotDraw jhotdraw org org All all rights right reserved reserve This software software is is the the confidential confidential and and proprietary proprietary information information of of JHotDraw jhotdraw org org Confidential confidential Information information You you shall shall not not disclose disclose such such Confidential confidential Information information and and shall shall use use it it only only in in accordance accordance with with the the terms term of of the the license license agreement agreement you you entered enter into into with with JHotDraw jhotdraw org org package org org jhotdraw jhotdraw draw draw import org org jhotdraw jhotdraw util util import java awt awt import java awt awt event event import java awt awt geom geom import java util util import javax javax swing swing undo undo import java io io import static org org jhotdraw jhotdraw draw draw AttributeKeys attribute key import org org jhotdraw jhotdraw geom geom import org org jhotdraw jhotdraw xml xml DOMInput dom input import org org jhotdraw jhotdraw xml xml DOMOutput dom output A a BezierFigure bezi figure can can be be used use to to draw draw arbitrary arbitrary shapes shape using using a a BezierPath bezi path It it can can be be used use to to draw draw an an open open path path or or a a closed close shape shape version 2 2 1 1 1 1 2006 2006 06 06 08 08 Fixed fix caps cap drawing drawing br 2 2 1 1 2006 2006 04 04 21 21 Improved improve caps cap drawing drawing br 2 2 0 0 2006 2006 01 01 14 14 Changed change to to support support double precison coordinates coordinate br 1 1 0 0 March march 14 14 2004 2004 author author Werner wern Randelshofer randelshof public class BezierFigure bezi figure extends AttributedFigure attribute figure public final static AttributeKey attribute key Boolean CLOSED c l o s e d new AttributeKey attribute key Boolean closed close false The the BezierPath bezi path protected BezierPath bezi path path path The the cappedPath cap path BezierPath bezi path is is derived derive from from variable variable path path We we cache cache it it to to increase increase the the drawing drawing speed speed of of the the figure figure private transient BezierPath bezi path cappedPath cap path Creates create a a new instance instance public BezierFigure bezi figure this false Creates create a a new instance instance public BezierFigure bezi figure boolean isClosed is close path path new BezierPath bezi path CLOSED c l o s e d set set this isClosed is close path path setClosed set close isClosed is close DRAWING d r a w i n g SHAPE s h a p e AND a n d BOUNDS b o u n d s ATTRIBUTES a t t r i b u t e s EDITING e d i t i n g CONNECTING c o n n e c t i n g Returns the the Figures figure connector connector for the the specified specify location location By by default a a ChopDiamondConnector chop diamond connector is is returned see see ChopDiamondConnector chop diamond connector public Connector connector findConnector find connector Point2D point2 d Double p p ConnectionFigure connection figure prototype prototype return new ChopBezierConnector chop bezi connector this public Connector connector findCompatibleConnector find compatible connector Connector connector c c boolean isStart is start return new ChopBezierConnector chop bezi connector this COMPOSITE c o m p o s i t e FIGURES f i g u r e s CLONING c l o n i n g EVENT e v e n t HANDLING h a n d l i n g protected void drawStroke draw stroke Graphics2D graphics2 d g g if isClosed is close double grow grow AttributeKeys attribute key getPerpendicularDrawGrowth get perpendicular draw growth this if grow grow 0d 0d g g draw draw path path else GrowStroke grow stroke gs g new GrowStroke grow stroke float grow grow float AttributeKeys attribute key getStrokeTotalWidth get stroke total width this STROKE s t r o k e MITER m i t e r LIMIT l i m i t FACTOR f a c t o r get get this g g draw draw gs g createStrokedShape create stroke shape path path else g g draw draw getCappedPath get cap path drawCaps draw cap g g protected void drawCaps draw cap Graphics2D graphics2 d g g if getPointCount get point count 1 1 if START s t a r t DECORATION d e c o r a t i o n get get this null BezierPath bezi path cp cp getCappedPath get cap path Point2D point2 d Double p1 p1 path path get get 0 0 0 0 Point2D point2 d Double p2 p2 cp cp get get 0 0 0 0 if p2 p2 equals equal p1 p1 p2 p2 path path get get 1 1 0 0 START s t a r t DECORATION d e c o r a t i o n get get this draw draw g g this p1 p1 p2 p2 if END e n d DECORATION d e c o r a t i o n get get this null BezierPath bezi path cp cp getCappedPath get cap path Point2D point2 d Double p1 p1 path path get get path path size size 1 1 0 0 Point2D point2 d Double p2 p2 cp cp get get path path size size 1 1 0 0 if p2 p2 equals equal p1 p1 p2 p2 path path get get path path size size 2 2 0 0 END e n d DECORATION d e c o r a t i o n get get this draw draw g g this p1 p1 p2 p2 protected void drawFill draw fill Graphics2D graphics2 d g g if isClosed is close double grow grow AttributeKeys attribute key getPerpendicularFillGrowth get perpendicular fill growth this if grow grow 0d 0d g g fill fill path path else GrowStroke grow stroke gs g new GrowStroke grow stroke float grow grow float AttributeKeys attribute key getStrokeTotalWidth get stroke total width this STROKE s t r o k e MITER m i t e r LIMIT l i m i t FACTOR f a c t o r get get this g g fill fill gs g createStrokedShape create stroke shape path path public boolean contains contain Point2D point2 d Double p p if isClosed is close double grow grow AttributeKeys attribute key getPerpendicularHitGrowth get perpendicular hit growth this if grow grow 0d 0d return path path contains contain p p else GrowStroke grow stroke gs g new GrowStroke grow stroke float grow grow float AttributeKeys attribute key getStrokeTotalWidth get stroke total width this STROKE s t r o k e MITER m i t e r LIMIT l i m i t FACTOR f a c t o r get get this return gs g createStrokedShape create stroke shape path path contains contain p p else double tolerance tolerance Math math max max 2f 2f AttributeKeys attribute key getStrokeTotalWidth get stroke total width this 2 2 if getCappedPath get cap path outlineContains outline contain p p tolerance tolerance return true if START s t a r t DECORATION d e c o r a t i o n get get this null BezierPath bezi path cp cp getCappedPath get cap path Point2D point2 d Double p1 p1 path path get get 0 0 0 0 Point2D point2 d Double p2 p2 cp cp get get 0 0 0 0 FIXME f i x m e Check check here here if caps cap path path contains contain the the point point if Geom geom lineContainsPoint line contain point p1 p1 x x p1 p1 y y p2 p2 x x p2 p2 y y p p x x p p y y tolerance tolerance return true if END e n d DECORATION d e c o r a t i o n get get this null BezierPath bezi path cp cp getCappedPath get cap path Point2D point2 d Double p1 p1 path path get get path path size size 1 1 0 0 Point2D point2 d Double p2 p2 cp cp get get path path size size 1 1 0 0 FIXME f i x m e Check check here here if caps cap path path contains contain the the point point if Geom geom lineContainsPoint line contain point p1 p1 x x p1 p1 y y p2 p2 x x p2 p2 y y p p x x p p y y tolerance tolerance return true return false Checks check if this figure figure can can be be connected connect By by default filled fill BezierFigures bezi figure can can be be connected connect public boolean canConnect can connect return isClosed is close public Collection collection Handle handle createHandles create handle int detailLevel detail level LinkedList link list Handle handle handles handle new LinkedList link list Handle handle switch detailLevel detail level case 0 0 BoxHandleKit box handle kit addBoxHandles add box handle this handles handle handles handle add add new BezierScaleHandle bezi scale handle this break case 1 1 for int i i 0 0 n n path path size size i i n n i++ i++ handles handle add add new BezierNodeHandle bezi node handle this i i break return handles handle public Rectangle2D rectangle2 d Double getBounds get bound Rectangle2D rectangle2 d Double bounds bound path path getBounds2DDouble get bounds2 d Make make sure sure bounds bound are are not not empty empty bounds bound width width Math math max max 1 1 bounds bound width width bounds bound height height Math math max max 1 1 bounds bound height height return bounds bound public Rectangle2D rectangle2 d Double getFigureDrawBounds get figure draw bound Rectangle2D rectangle2 d Double r r super getFigureDrawBounds get figure draw bound if getNodeCount get node count 1 1 if START s t a r t DECORATION d e c o r a t i o n get get this null Point2D point2 d Double p1 p1 getPoint get point 0 0 0 0 Point2D point2 d Double p2 p2 getPoint get point 1 1 0 0 r r add add START s t a r t DECORATION d e c o r a t i o n get get this getDrawBounds get draw bound this p1 p1 p2 p2 if END e n d DECORATION d e c o r a t i o n get get this null Point2D point2 d Double p1 p1 getPoint get point getNodeCount get node count 1 1 0 0 Point2D point2 d Double p2 p2 getPoint get point getNodeCount get node count 2 2 0 0 r r add add END e n d DECORATION d e c o r a t i o n get get this getDrawBounds get draw bound this p1 p1 p2 p2 return r r protected void validate validate super validate validate path path invalidatePath invalidate path invalidateCappedPath invalidate cap path Returns a a clone clone of of the the bezier bezi path path of of this figure figure public BezierPath bezi path getBezierPath get bezi path return BezierPath bezi path path path clone clone public Point2D point2 d Double getPointOnPath get point on path float relative relative double flatness flatness return path path getPointOnPath get point on path relative relative flatness flatness Sets set the the bezier bezi path path without without cloning cloning and and without without firing firing events event public void basicSetBezierPath basic set bezi path BezierPath bezi path newValue value this path path newValue value this setClosed set close newValue value isClosed is close public boolean isClosed is close return Boolean getAttribute get attribute CLOSED c l o s e d public void setClosed set close boolean newValue value CLOSED c l o s e d set set this newValue value public void basicSetAttribute basic set attribute AttributeKey attribute key key key Object newValue value if key key CLOSED c l o s e d path path setClosed set close Boolean newValue value super basicSetAttribute basic set attribute key key newValue value public void basicSetBounds basic set bound Point2D point2 d Double anchor anchor Point2D point2 d Double lead basicSetStartPoint basic set start point anchor anchor basicSetEndPoint basic set end point lead invalidate invalidate public void basicTransform basic transform AffineTransform affine transform tx tx path path transform transform tx tx invalidate invalidate public void invalidate invalidate super invalidate invalidate path path invalidatePath invalidate path invalidateCappedPath invalidate cap path protected void invalidateCappedPath invalidate cap path cappedPath cap path null Returns a a path path which which is is cappedPath cap path at at the the ends end to to prevent prevent it it from from drawing drawing under under the the end end caps cap protected BezierPath bezi path getCappedPath get cap path if cappedPath cap path null cappedPath cap path BezierPath bezi path path path clone clone if isClosed is close cappedPath cap path setClosed set close true else if cappedPath cap path size size 1 1 if START s t a r t DECORATION d e c o r a t i o n get get this null BezierPath bezi path Node node p0 p0 cappedPath cap path get get 0 0 BezierPath bezi path Node node p1 p1 cappedPath cap path get get 1 1 Point2D point2 d Double pp pp if p0 p0 getMask get mask BezierPath bezi path C2 c2 MASK m a s k 0 0 pp pp p0 p0 getControlPoint get control point 2 2 else if p1 p1 getMask get mask BezierPath bezi path C1 c1 MASK m a s k 0 0 pp pp p1 p1 getControlPoint get control point 1 1 else pp pp p1 p1 getControlPoint get control point 0 0 double radius radius START s t a r t DECORATION d e c o r a t i o n get get this getDecorationRadius get decoration radius this double lineLength line length Geom geom length length p0 p0 getControlPoint get control point 0 0 pp pp cappedPath cap path set set 0 0 0 0 Geom geom cap cap pp pp p0 p0 getControlPoint get control point 0 0 Math math min min radius radius lineLength line length if END e n d DECORATION d e c o r a t i o n get get this null BezierPath bezi path Node node p0 p0 cappedPath cap path get get cappedPath cap path size size 1 1 BezierPath bezi path Node node p1 p1 cappedPath cap path get get cappedPath cap path size size 2 2 Point2D point2 d Double pp pp if p0 p0 getMask get mask BezierPath bezi path C1 c1 MASK m a s k 0 0 pp pp p0 p0 getControlPoint get control point 1 1 else if p1 p1 getMask get mask BezierPath bezi path C2 c2 MASK m a s k 0 0 pp pp p1 p1 getControlPoint get control point 2 2 else pp pp p1 p1 getControlPoint get control point 0 0 double radius radius END e n d DECORATION d e c o r a t i o n get get this getDecorationRadius get decoration radius this double lineLength line length Geom geom length length p0 p0 getControlPoint get control point 0 0 pp pp cappedPath cap path set set cappedPath cap path size size 1 1 0 0 Geom geom cap cap pp pp p0 p0 getControlPoint get control point 0 0 Math math min min radius radius lineLength line length cappedPath cap path invalidatePath invalidate path return cappedPath cap path public void layout layout Adds add a a control control point point public void addNode add node BezierPath bezi path Node node p p addNode add node getNodeCount get node count p p Adds add a a node node to to the the list list of of points point public void addNode add node final int index index BezierPath bezi path Node node p p final BezierPath bezi path Node node newPoint point new BezierPath bezi path Node node p p willChange will change basicAddNode basic add node index index newPoint point layout layout changed change fireUndoableEditHappened fire undoable edit happen new AbstractUndoableEdit undoable edit public String getPresentationName get presentation name return Punkt punkt einf\u00fcgen einf\u00fcgen public void undo undo throws CannotUndoException cannot undo super undo undo willChange will change basicRemoveNode basic remove node index index changed change public void redo redo throws CannotUndoException cannot undo super redo redo willChange will change basicAddNode basic add node index index newPoint point changed change Adds add a a control control point point public void basicAddNode basic add node BezierPath bezi path Node node p p path path add add p p invalidate invalidate Adds add a a control control point point public void basicAddNode basic add node int index index BezierPath bezi path Node node p p path path add add index index p p Sets set a a control control point point public void setNode set node int index index BezierPath bezi path Node node p p willChange will change BezierPath bezi path Node node oldValue old value path path get get index index BezierPath bezi path Node node newValue value new BezierPath bezi path Node node p p basicSetNode basic set node index index newValue value changed change fireUndoableEditHappened fire undoable edit happen new BezierNodeEdit bezi node edit this index index oldValue old value newValue value Sets set a a control control point point public void basicSetNode basic set node int index index BezierPath bezi path Node node p p path path set set index index p p Gets get a a control control point point public BezierPath bezi path Node node getNode get node int index index return BezierPath bezi path Node node path path get get index index clone clone Convenience convenience method for getting getting the the point point coordinate coordinate of of the the first first control control point point of of the the specified specify node node public Point2D point2 d Double getPoint get point int index index return path path get get index index getControlPoint get control point 0 0 Gets get the the point point coordinate coordinate of of a a control control point point public Point2D point2 d Double getPoint get point int index index int coord coord return path path get get index index getControlPoint get control point coord coord Sets set the the point point coordinate coordinate of of a a control control point point public void setPoint set point int index index int coord coord Point2D point2 d Double p p willChange will change basicSetPoint basic set point index index coord coord p p changed change XXX x x x Fire fire undoable undoable Edit edit event event Sets set the the point point coordinate coordinate of of control control point point 0 0 at at the the specified specify node node public void basicSetPoint basic set point int index index Point2D point2 d Double p p BezierPath bezi path Node node node node path path get get index index double dx dx p p x x node node x x 0 0 double dy dy p p y y node node y y 0 0 for int i i 0 0 i i node node x x length length i++ i++ node node x x i i + + dx dx node node y y i i + + dy dy invalidate invalidate Sets set the the point point coordinate coordinate of of a a control control point point public void basicSetPoint basic set point int index index int coord coord Point2D point2 d Double p p BezierPath bezi path Node node cp cp new BezierPath bezi path Node node path path get get index index cp cp setControlPoint set control point coord coord p p basicSetNode basic set node index index cp cp Convenience convenience method for setting setting the the point point coordinate coordinate of of the the start start point point public void basicSetStartPoint basic set start point Point2D point2 d Double p p basicSetPoint basic set point 0 0 p p Convenience convenience method for setting setting the the point point coordinate coordinate of of the the end end point point public void basicSetEndPoint basic set end point Point2D point2 d Double p p basicSetPoint basic set point getPointCount get point count 1 1 p p Convenience convenience method for getting getting the the start start point point public Point2D point2 d Double getStartPoint get start point return getPoint get point 0 0 0 0 Convenience convenience method for getting getting the the end end point point public Point2D point2 d Double getEndPoint get end point return getPoint get point getNodeCount get node count 1 1 0 0 Finds find a a control control point point index index Returns 1 1 if no no control control point point could could be be found found FIXME f i x m e Move move this to to BezierPath bezi path public int findNode find node Point2D point2 d Double p p BezierPath bezi path tp tp path path for int i i 0 0 i i tp tp size size i++ i++ BezierPath bezi path Node node p2 p2 tp tp get get i i if p2 p2 x x 0 0 p p x x p2 p2 y y 0 0 p p y y return i i return 1 1 Removes remove all all points point public final void removeAllNodes remove all node willChange will change basicRemoveAllNodes basic remove all node changed change Removes remove the the Point2D point2 d Double at at the the specified specify index index public final void removeNode remove node final int index index final BezierPath bezi path Node node oldPoint old point new BezierPath bezi path Node node path path get get index index willChange will change basicRemoveNode basic remove node index index layout layout changed change fireUndoableEditHappened fire undoable edit happen new AbstractUndoableEdit undoable edit public String getPresentationName get presentation name return Punkt punkt entfernen entfernen public void undo undo throws CannotUndoException cannot undo super undo undo willChange will change basicAddNode basic add node index index oldPoint old point changed change public void redo redo throws CannotUndoException cannot undo super redo redo basicRemoveNode basic remove node index index changed change Gets get the the segment segment of of the the polyline polyline that that is is hit hit by by the the given given Point2D point2 d Double return the the index index of of the the segment segment or or 1 1 if no no segment segment was wa hit hit XXX x x x Move move this to to BezierPath bezi path public int findSegment find segment Point2D point2 d Double find find Fixme fixme use use path path iterator iterator Point2D point2 d Double p1 p1 p2 p2 for int i i 0 0 n n getNodeCount get node count 1 1 i i n n i++ i++ p1 p1 path path get get i i 0 0 p2 p2 path path get get i+1 i+1 0 0 if Geom geom lineContainsPoint line contain point p1 p1 x x p1 p1 y y p2 p2 x x p2 p2 y y find find x x find find y y 3d 3d return i i return 1 1 Joins join two two segments segment into into one one if the the given given Point2D point2 d Double hits hit a a node node of of the the polyline polyline return true if the the two two segments segment were be joined join XXX x x x Move move this to to BezierPath bezi path public boolean basicJoinSegments basic join segment Point2D point2 d Double join join int i i findSegment find segment join join if i i 1 1 i i 1 1 removeNode remove node i i return true return false Splits split the the segment segment at at the the given given Point2D point2 d Double if a a segment segment was wa hit hit return the the index index of of the the segment segment or or 1 1 if no no segment segment was wa hit hit XXX x x x Move move this to to BezierPath bezi path public int basicSplitSegment basic split segment Point2D point2 d Double split split int i i findSegment find segment split split if i i 1 1 addNode add node i i + + 1 1 new BezierPath bezi path Node node split split return i+1 i+1 Removes remove the the Point2D point2 d Double at at the the specified specify index index protected void basicRemoveNode basic remove node int index index path path remove remove index index Removes remove the the Point2D point2 d Double at at the the specified specify index index protected void basicRemoveAllNodes basic remove all node path path clear clear Gets get the the node node count count public int getNodeCount get node count return path path size size Gets get the the point point count count public int getPointCount get point count return path path size size public BezierFigure bezi figure clone clone BezierFigure bezi figure that that BezierFigure bezi figure super clone clone that that path path BezierPath bezi path this path path clone clone that that invalidate invalidate return that that public void restoreTo restore to Object geometry geometry path path setTo set to BezierPath bezi path geometry geometry public Object getRestoreData get restore data return path path clone clone public Point2D point2 d Double chop chop Point2D point2 d Double p p if isClosed is close double grow grow AttributeKeys attribute key getPerpendicularHitGrowth get perpendicular hit growth this if grow grow 0d 0d return path path chop chop p p else GrowStroke grow stroke gs g new GrowStroke grow stroke float grow grow float AttributeKeys attribute key getStrokeTotalWidth get stroke total width this STROKE s t r o k e MITER m i t e r LIMIT l i m i t FACTOR f a c t o r get get this return Geom geom chop chop gs g createStrokedShape create stroke shape path path p p else return path path chop chop p p public Point2D point2 d Double getCenter get center return path path getCenter get center public Point2D point2 d Double getOutermostPoint get outermost point return path path get get path path indexOfOutermostNode index of outermost node getControlPoint get control point 0 0 Joins join two two segments segment into into one one if the the given given Point2D point2 d Double hits hit a a node node of of the the polyline polyline return true if the the two two segments segment were be joined join public int basicJoinSegments basic join segment Point2D point2 d Double join join float tolerance tolerance return path path joinSegments join segment join join tolerance tolerance Splits split the the segment segment at at the the given given Point2D point2 d Double if a a segment segment was wa hit hit return the the index index of of the the segment segment or or 1 1 if no no segment segment was wa hit hit public int basicSplitSegment basic split segment Point2D point2 d Double split split float tolerance tolerance return path path splitSegment split segment split split tolerance tolerance Handles handle a a mouse mouse click click public boolean handleMouseClick handle mouse click Point2D point2 d Double p p MouseEvent mouse event evt evt DrawingView drawing view view view if evt evt getClickCount get click count 2 2 view view getHandleDetailLevel get handle detail level 1 1 willChange will change final int index index basicSplitSegment basic split segment p p float 5f 5f view view getScaleFactor get scale factor if index index 1 1 final BezierPath bezi path Node node newNode node getNode get node index index fireUndoableEditHappened fire undoable edit happen new AbstractUndoableEdit undoable edit public void redo redo throws CannotRedoException cannot redo super redo redo willChange will change basicAddNode basic add node index index newNode node changed change public void undo undo throws CannotUndoException cannot undo super undo undo willChange will change basicRemoveNode basic remove node index index changed change changed change return true return false public void write write DOMOutput dom output out out throws IOException i o writePoints write point out out writeAttributes write attribute out out protected void writePoints write point DOMOutput dom output out out throws IOException i o out out openElement open element points point if isClosed is close out out addAttribute add attribute closed close true for int i i 0 0 n n getNodeCount get node count i i n n i++ i++ BezierPath bezi path Node node node node getNode get node i i out out openElement open element p p if node node mask mask 0 0 out out addAttribute add attribute mask mask node node mask mask if node node keepColinear keep colinear out out addAttribute add attribute colinear colinear false out out addAttribute add attribute x x node node x x 0 0 out out addAttribute add attribute y y node node y y 0 0 if node node x x 1 1 node node x x 0 0 || || node node y y 1 1 node node y y 0 0 out out addAttribute add attribute c1x c1x node node x x 1 1 out out addAttribute add attribute c1y c1y node node y y 1 1 if node node x x 2 2 node node x x 0 0 || || node node y y 2 2 node node y y 0 0 out out addAttribute add attribute c2x c2x node node x x 2 2 out out addAttribute add attribute c2y c2y node node y y 2 2 out out closeElement close element out out closeElement close element Override override public void read read DOMInput dom input in in throws IOException i o readPoints read point in in readAttributes read attribute in in protected void readPoints read point DOMInput dom input in in throws IOException i o path path clear clear in in openElement open element points point setClosed set close in in getAttribute get attribute closed close false for int i i 0 0 n n in in getElementCount get element count p p i i n n i++ i++ in in openElement open element p p i i BezierPath bezi path Node node node node new BezierPath bezi path Node node in in getAttribute get attribute mask mask 0 0 in in getAttribute get attribute x x 0d 0d in in getAttribute get attribute y y 0d 0d in in getAttribute get attribute c1x c1x in in getAttribute get attribute x x 0d 0d in in getAttribute get attribute c1y c1y in in getAttribute get attribute y y 0d 0d in in getAttribute get attribute c2x c2x in in getAttribute get attribute x x 0d 0d in in getAttribute get attribute c2y c2y in in getAttribute get attribute y y 0d 0d node node keepColinear keep colinear in in getAttribute get attribute colinear colinear true path path add add node node path path invalidatePath invalidate path in in closeElement close element in in closeElement close element 