Bezier bezi java 2 2 0 0 1 1 2006 2006 06 06 14 14 Copyright copyright c c 1996 1996 2006 2006 by by the the original original authors author of of JHotDraw jhotdraw and and all all its it contributors contributor JHotDraw jhotdraw org org All all rights right reserved reserve This software software is is the the confidential confidential and and proprietary proprietary information information of of JHotDraw jhotdraw org org Confidential confidential Information information You you shall shall not not disclose disclose such such Confidential confidential Information information and and shall shall use use it it only only in in accordance accordance with with the the terms term of of the the license license agreement agreement you you entered enter into into with with JHotDraw jhotdraw org org package org org jhotdraw jhotdraw geom geom import org org jhotdraw jhotdraw util util import java awt awt import java awt awt geom geom Provides provide algorithms algorithm for fitting fitting Bezier bezi curves curve to to a a set set of of digitized digitize points point p p Source source br An an Algorithm algorithm for Automatically automatically Fitting fitting Digitized digitize Curves curve by by Philip philip J j Schneider schneid br from from Graphics graphic Gems gem Academic academic Press press 1990 1990 version 2 2 0 0 1 1 2006 2006 06 06 14 14 Fit fit bezier bezi curve curve must must preserve preserve closed close state state of of fitted fit BezierPath bezi path object br 2 2 0 0 2006 2006 01 01 14 14 Changed change to to support support double precision precision coordinates coordinate br 1 1 0 0 March march 14 14 2004 2004 author author Werner wern Randelshofer randelshof public class Bezier bezi The the most most points point you you can can have have private final static int MAXPOINTS m a x p o i n t s 1000 1000 Prevent prevent instance instance creation creation private Bezier bezi Example example of of how how to to use use the the curve curve fitting fitting code Given given an an array of of points point and and a a tolerance tolerance squared square error between between points point and and fitted fit curve curve the the algorithm algorithm will will generate generate a a piecewise piecewise cubic cubic Bezier bezi representation representation that that approximates approximate the the points point When when a a cubic cubic is is generated generate the the routine routine DrawBezierCurve draw bezi curve is is called call which which outputs output the the Bezier bezi curve curve just just created create arguments argument are are the the degree degree and and the the control control points point respectively respectively Users user will will have have to to implement implement this function function themselves themselve ascii ascii output output etc etc public static void main String args Point2D point2 d Double d d Digitized digitize points point new Point2D point2 d Double 0 0 0 0 0 0 0 0 new Point2D point2 d Double 0 0 0 0 0 0 5 5 new Point2D point2 d Double 1 1 1 1 1 1 4 4 new Point2D point2 d Double 2 2 1 1 1 1 6 6 new Point2D point2 d Double 3 3 2 2 1 1 1 1 new Point2D point2 d Double 4 4 0 0 0 0 2 2 new Point2D point2 d Double 4 4 0 0 0 0 0 0 double error 4 4 0 0 Squared square error GeneralPath general path path path fitCurve fit curve d d error Fit fit the the Bezier bezi curves curve System out out println path path Fit fit a a Bezier bezi curve curve to to a a set set of of digitized digitize points point param p p Polygon polygon with with a a set set of of digitized digitize points point param error User user defined define error squared square return Returns a a GeneralPath general path containing contain the the bezier bezi curves curve public static GeneralPath general path fitCurve fit curve Polygon polygon p p double error Point2D point2 d Double d d new Point2D point2 d Double p p npoints npoint for int i i 0 0 i i d d length length i++ i++ d d i i new Point2D point2 d Double p p xpoints xpoint i i p p ypoints ypoint i i return fitCurve fit curve d d error Fit fit a a Bezier bezi curve curve to to a a set set of of digitized digitize points point param d d Array of of digitized digitize points point param error User user defined define error squared square return Returns a a GeneralPath general path containing contain the the bezier bezi curves curve public static GeneralPath general path fitCurve fit curve Point2D point2 d Double d d double error Point2D point2 d Double tHat1 t hat1 new Point2D point2 d Double Point2D point2 d Double tHat2 t hat2 new Point2D point2 d Double Unit unit tangent tangent vectors vector at at endpoints endpoint GeneralPath general path bezierPath bezi path new GeneralPath general path bezierPath bezi path moveTo move to float d d 0 0 x x float d d 0 0 y y tHat1 t hat1 computeLeftTangent compute left tangent d d 0 0 tHat2 t hat2 computeRightTangent compute right tangent d d d d length length 1 1 fitCubic fit cubic d d 0 0 d d length length 1 1 tHat1 t hat1 tHat2 t hat2 error bezierPath bezi path return bezierPath bezi path Fit fit a a Bezier bezi curve curve to to a a set set of of digitized digitize points point param path path The the path path onto onto which which to to fit fit a a bezier bezi curve curve param error User user defined define error squared square return Returns a a BezierPath bezi path containing contain the the bezier bezi curves curve public static BezierPath bezi path fitBezierCurve fit bezi curve BezierPath bezi path path path double error Point2D point2 d Double d d path path toPolygonArray to polygon Point2D point2 d Double tHat1 t hat1 new Point2D point2 d Double Point2D point2 d Double tHat2 t hat2 new Point2D point2 d Double Unit unit tangent tangent vectors vector at at endpoints endpoint BezierPath bezi path bezierPath bezi path new BezierPath bezi path bezierPath bezi path add add new BezierPath bezi path Node node d d 0 0 tHat1 t hat1 computeLeftTangent compute left tangent d d 0 0 tHat2 t hat2 computeRightTangent compute right tangent d d d d length length 1 1 fitCubic fit cubic d d 0 0 d d length length 1 1 tHat1 t hat1 tHat2 t hat2 error bezierPath bezi path bezierPath bezi path setClosed set close path path isClosed is close return bezierPath bezi path Fit fit a a Bezier bezi curve curve to to a a sub sub set set of of digitized digitize points point param d d Array of of digitized digitize points point param first first Indice indice of of first first point point in in d d param last last Indice indice of of last last point point in in d d param tHat1 t hat1 Unit unit tangent tangent vectors vector at at start start point point param tHat2 t hat2 Unit unit tanget tanget vector vector at at end end point point param error User user defined define error squared square param bezierPath bezi path Path path to to which which the the bezier bezi curve curve segments segment are are added add private static void fitCubic fit cubic Point2D point2 d Double d d int first first int last last Point2D point2 d Double tHat1 t hat1 Point2D point2 d Double tHat2 t hat2 double error GeneralPath general path bezierPath bezi path Point2D point2 d Double bezCurve bez curve Control control points point of of fitted fit Bezier bezi curve curve double u u Parameter parameter values value for point point double uPrime u prime Improved improve parameter parameter values value double maxError max Maximum maximum fitting fitting error int splitPoint split point new int 1 1 Point point to to split split point point set set at at This is is an an array of of size size one one because because we we need need it it as a an an input input output output parameter parameter int nPts n pt Number number of of points point in in subset subset double iterationError iteration Error below below which which you you try iterating iterate int maxIterations max iteration 4 4 Max max times time to to try iterating iterate Point2D point2 d Double tHatCenter t hat center new Point2D point2 d Double Unit unit tangent tangent vector vector at at splitPoint split point int i i iterationError iteration error error nPts n pt last last first first + + 1 1 Use use heuristic heuristic if region region only only has ha two two points point in in it it if nPts n pt 2 2 double dist dist v2DistanceBetween2Points v2 distance between2 point d d last last d d first first 3 3 0 0 bezCurve bez curve new Point2D point2 d Double 4 4 for i i 0 0 i i bezCurve bez curve length length i++ i++ bezCurve bez curve i i new Point2D point2 d Double bezCurve bez curve 0 0 d d first first bezCurve bez curve 3 3 d d last last v2Add v2 add bezCurve bez curve 0 0 v2Scale v2 scale tHat1 t hat1 dist dist bezCurve bez curve 1 1 v2Add v2 add bezCurve bez curve 3 3 v2Scale v2 scale tHat2 t hat2 dist dist bezCurve bez curve 2 2 bezierPath bezi path curveTo curve to float bezCurve bez curve 1 1 x x float bezCurve bez curve 1 1 y y float bezCurve bez curve 2 2 x x float bezCurve bez curve 2 2 y y float bezCurve bez curve 3 3 x x float bezCurve bez curve 3 3 y y return Parameterize parameterize points point and and attempt attempt to to fit fit curve curve u u chordLengthParameterize chord length parameterize d d first first last last bezCurve bez curve generateBezier generate bezi d d first first last last u u tHat1 t hat1 tHat2 t hat2 Find find max max deviation deviation of of points point to to fitted fit curve curve maxError max computeMaxError compute max d d first first last last bezCurve bez curve u u splitPoint split point if maxError max error bezierPath bezi path curveTo curve to float bezCurve bez curve 1 1 x x float bezCurve bez curve 1 1 y y float bezCurve bez curve 2 2 x x float bezCurve bez curve 2 2 y y float bezCurve bez curve 3 3 x x float bezCurve bez curve 3 3 y y return If error not not too too large large try some some reparameterization reparameterization and and iteration iteration if maxError max iterationError iteration for i i 0 0 i i maxIterations max iteration i++ i++ uPrime u prime reparameterize reparameterize d d first first last last u u bezCurve bez curve bezCurve bez curve generateBezier generate bezi d d first first last last uPrime u prime tHat1 t hat1 tHat2 t hat2 maxError max computeMaxError compute max d d first first last last bezCurve bez curve uPrime u prime splitPoint split point if maxError max error bezierPath bezi path curveTo curve to float bezCurve bez curve 1 1 x x float bezCurve bez curve 1 1 y y float bezCurve bez curve 2 2 x x float bezCurve bez curve 2 2 y y float bezCurve bez curve 3 3 x x float bezCurve bez curve 3 3 y y return u u uPrime u prime Fitting fitting failed fail split split at at max max error point point and and fit fit recursively recursively tHatCenter t hat center computeCenterTangent compute center tangent d d splitPoint split point 0 0 fitCubic fit cubic d d first first splitPoint split point 0 0 tHat1 t hat1 tHatCenter t hat center error bezierPath bezi path v2Negate v2 negate tHatCenter t hat center fitCubic fit cubic d d splitPoint split point 0 0 last last tHatCenter t hat center tHat2 t hat2 error bezierPath bezi path Fit fit a a Bezier bezi curve curve to to a a sub sub set set of of digitized digitize points point param d d Array of of digitized digitize points point param first first Indice indice of of first first point point in in d d param last last Indice indice of of last last point point in in d d param tHat1 t hat1 Unit unit tangent tangent vectors vector at at start start point point param tHat2 t hat2 Unit unit tanget tanget vector vector at at end end point point param error User user defined define error squared square param bezierPath bezi path Path path to to which which the the bezier bezi curve curve segments segment are are added add private static void fitCubic fit cubic Point2D point2 d Double d d int first first int last last Point2D point2 d Double tHat1 t hat1 Point2D point2 d Double tHat2 t hat2 double error BezierPath bezi path bezierPath bezi path Point2D point2 d Double bezCurve bez curve Control control points point of of fitted fit Bezier bezi curve curve double u u Parameter parameter values value for point point double uPrime u prime Improved improve parameter parameter values value double maxError max Maximum maximum fitting fitting error int splitPoint split point new int 1 1 Point point to to split split point point set set at at This is is an an array of of size size one one because because we we need need it it as a an an input input output output parameter parameter int nPts n pt Number number of of points point in in subset subset double iterationError iteration Error below below which which you you try iterating iterate int maxIterations max iteration 4 4 Max max times time to to try iterating iterate Point2D point2 d Double tHatCenter t hat center new Point2D point2 d Double Unit unit tangent tangent vector vector at at splitPoint split point int i i iterationError iteration error error nPts n pt last last first first + + 1 1 Use use heuristic heuristic if region region only only has ha two two points point in in it it if nPts n pt 2 2 double dist dist v2DistanceBetween2Points v2 distance between2 point d d last last d d first first 3 3 0 0 bezCurve bez curve new Point2D point2 d Double 4 4 for i i 0 0 i i bezCurve bez curve length length i++ i++ bezCurve bez curve i i new Point2D point2 d Double bezCurve bez curve 0 0 d d first first bezCurve bez curve 3 3 d d last last v2Add v2 add bezCurve bez curve 0 0 v2Scale v2 scale tHat1 t hat1 dist dist bezCurve bez curve 1 1 v2Add v2 add bezCurve bez curve 3 3 v2Scale v2 scale tHat2 t hat2 dist dist bezCurve bez curve 2 2 bezierPath bezi path curveTo curve to bezCurve bez curve 1 1 x x bezCurve bez curve 1 1 y y bezCurve bez curve 2 2 x x bezCurve bez curve 2 2 y y bezCurve bez curve 3 3 x x bezCurve bez curve 3 3 y y return Parameterize parameterize points point and and attempt attempt to to fit fit curve curve u u chordLengthParameterize chord length parameterize d d first first last last bezCurve bez curve generateBezier generate bezi d d first first last last u u tHat1 t hat1 tHat2 t hat2 Find find max max deviation deviation of of points point to to fitted fit curve curve maxError max computeMaxError compute max d d first first last last bezCurve bez curve u u splitPoint split point if maxError max error bezierPath bezi path curveTo curve to bezCurve bez curve 1 1 x x bezCurve bez curve 1 1 y y bezCurve bez curve 2 2 x x bezCurve bez curve 2 2 y y bezCurve bez curve 3 3 x x bezCurve bez curve 3 3 y y return If error not not too too large large try some some reparameterization reparameterization and and iteration iteration if maxError max iterationError iteration for i i 0 0 i i maxIterations max iteration i++ i++ uPrime u prime reparameterize reparameterize d d first first last last u u bezCurve bez curve bezCurve bez curve generateBezier generate bezi d d first first last last uPrime u prime tHat1 t hat1 tHat2 t hat2 maxError max computeMaxError compute max d d first first last last bezCurve bez curve uPrime u prime splitPoint split point if maxError max error bezierPath bezi path curveTo curve to bezCurve bez curve 1 1 x x bezCurve bez curve 1 1 y y bezCurve bez curve 2 2 x x bezCurve bez curve 2 2 y y bezCurve bez curve 3 3 x x bezCurve bez curve 3 3 y y return u u uPrime u prime Fitting fitting failed fail split split at at max max error point point and and fit fit recursively recursively tHatCenter t hat center computeCenterTangent compute center tangent d d splitPoint split point 0 0 fitCubic fit cubic d d first first splitPoint split point 0 0 tHat1 t hat1 tHatCenter t hat center error bezierPath bezi path v2Negate v2 negate tHatCenter t hat center fitCubic fit cubic d d splitPoint split point 0 0 last last tHatCenter t hat center tHat2 t hat2 error bezierPath bezi path Use use least least squares square method to to find find Bezier bezi control control points point for region region param d d Array of of digitized digitize points point param first first Indice indice of of first first point point in in d d param last last Indice indice of of last last point point in in d d param uPrime u prime Parameter parameter values value for region region param tHat1 t hat1 Unit unit tangent tangent vectors vector at at start start point point param tHat2 t hat2 Unit unit tanget tanget vector vector at at end end point point private static Point2D point2 d Double generateBezier generate bezi Point2D point2 d Double d d int first first int last last double uPrime u prime Point2D point2 d Double tHat1 t hat1 Point2D point2 d Double tHat2 t hat2 int i i Point2D point2 d Double A a new Point2D point2 d Double MAXPOINTS m a x p o i n t s 2 2 Precomputed precomput rhs rh for eqn eqn int nPts n pt Number number of of pts pt in in sub sub curve curve double C c new double 2 2 2 2 Matrix matrix C c double X x new double 2 2 Matrix matrix X x double det det C0 c0 C1 c1 Determinants determinant of of matrices matrix det det C0 c0 X x det det X x C1 c1 double alpha alpha l l Alpha alpha values value left left and and right right alpha alpha r r Point2D point2 d Double tmp tmp new Point2D point2 d Double Utility utility variable variable Point2D point2 d Double bezCurve bez curve RETURN r e t u r n bezier bezi curve curve ctl ctl pts pt bezCurve bez curve new Point2D point2 d Double 4 4 for i i 0 0 i i bezCurve bez curve length length i++ i++ bezCurve bez curve i i new Point2D point2 d Double nPts n pt last last first first + + 1 1 Compute compute the the A a s s for i i 0 0 i i nPts n pt i++ i++ Point2D point2 d Double v1 v1 v2 v2 v1 v1 Point2D point2 d Double tHat1 t hat1 clone clone v2 v2 Point2D point2 d Double tHat2 t hat2 clone clone v2Scale v2 scale v1 v1 b1 b1 uPrime u prime i i v2Scale v2 scale v2 v2 b2 b2 uPrime u prime i i A a i i 0 0 v1 v1 A a i i 1 1 v2 v2 Create create the the C c and and X x matrices matrix C c 0 0 0 0 0 0 0 0 C c 0 0 1 1 0 0 0 0 C c 1 1 0 0 0 0 0 0 C c 1 1 1 1 0 0 0 0 X x 0 0 0 0 0 0 X x 1 1 0 0 0 0 for i i 0 0 i i nPts n pt i++ i++ C c 0 0 0 0 + + v2Dot v2 dot A a i i 0 0 A a i i 0 0 C c 0 0 1 1 + + v2Dot v2 dot A a i i 0 0 A a i i 1 1 C c 1 1 0 0 + + V2Dot v2 dot A a i i 0 0 A a i i 1 1 C c 1 1 0 0 C c 0 0 1 1 C c 1 1 1 1 + + v2Dot v2 dot A a i i 1 1 A a i i 1 1 tmp tmp v2SubII v2 sub i i d d first first + + i i v2AddII v2 add i i v2ScaleIII v2 scale i i i d d first first b0 b0 uPrime u prime i i v2AddII v2 add i i v2ScaleIII v2 scale i i i d d first first b1 b1 uPrime u prime i i v2AddII v2 add i i v2ScaleIII v2 scale i i i d d last last b2 b2 uPrime u prime i i v2ScaleIII v2 scale i i i d d last last b3 b3 uPrime u prime i i X x 0 0 + + v2Dot v2 dot A a i i 0 0 tmp tmp X x 1 1 + + v2Dot v2 dot A a i i 1 1 tmp tmp Compute compute the the determinants determinant of of C c and and X x det det C0 c0 C1 c1 C c 0 0 0 0 C c 1 1 1 1 C c 1 1 0 0 C c 0 0 1 1 det det C0 c0 X x C c 0 0 0 0 X x 1 1 C c 0 0 1 1 X x 0 0 det det X x C1 c1 X x 0 0 C c 1 1 1 1 X x 1 1 C c 0 0 1 1 Finally derive derive alpha alpha values value if det det C0 c0 C1 c1 0 0 0 0 det det C0 c0 C1 c1 C c 0 0 0 0 C c 1 1 1 1 10e 10e 12 12 alpha alpha l l det det X x C1 c1 det det C0 c0 C1 c1 alpha alpha r r det det C0 c0 X x det det C0 c0 C1 c1 If alpha alpha negative negative use use the the Wu wu Barsky barsky heuristic heuristic see see text text if alpha alpha is is 0 0 you you get get coincident coincident control control points point that that lead to to divide divide by by zero zero in in any any subsequent subsequent NewtonRaphsonRootFind newton raphson root find call call if alpha alpha l l 1 1 0e 0e 6 6 || || alpha alpha r r 1 1 0e 0e 6 6 double dist dist v2DistanceBetween2Points v2 distance between2 point d d last last d d first first 3 3 0 0 bezCurve bez curve 0 0 d d first first bezCurve bez curve 3 3 d d last last v2Add v2 add bezCurve bez curve 0 0 v2Scale v2 scale tHat1 t hat1 dist dist bezCurve bez curve 1 1 v2Add v2 add bezCurve bez curve 3 3 v2Scale v2 scale tHat2 t hat2 dist dist bezCurve bez curve 2 2 return bezCurve bez curve First first and and last last control control points point of of the the Bezier bezi curve curve are are positioned position exactly exactly at at the the first first and and last last data data points point Control control points point 1 1 and and 2 2 are are positioned position an an alpha alpha distance distance out out on on the the tangent tangent vectors vector left left and and right right respectively respectively bezCurve bez curve 0 0 d d first first bezCurve bez curve 3 3 d d last last v2Add v2 add bezCurve bez curve 0 0 v2Scale v2 scale tHat1 t hat1 alpha alpha l l bezCurve bez curve 1 1 v2Add v2 add bezCurve bez curve 3 3 v2Scale v2 scale tHat2 t hat2 alpha alpha r r bezCurve bez curve 2 2 return bezCurve bez curve Given given set set of of points point and and their their parameterization parameterization try to to find find a a better better parameterization parameterization param d d Array of of digitized digitize points point param first first Indice indice of of first first point point of of region region in in d d param last last Indice indice of of last last point point of of region region in in d d param u u Current current parameter parameter values value param bezCurve bez curve Current current fitted fit curve curve private static double reparameterize reparameterize Point2D point2 d Double d d int first first int last last double u u Point2D point2 d Double bezCurve bez curve int nPts n pt last last first+1 first+1 int i i double uPrime u prime New parameter parameter values value uPrime u prime new double nPts n pt for i i first first i i last last i++ i++ uPrime u prime i i first first newtonRaphsonRootFind newton raphson root find bezCurve bez curve d d i i u u i i first first return uPrime u prime Use use Newton newton Raphson raphson iteration iteration to to find find better better root root param Q q Current current fitted fit bezier bezi curve curve param P p Digitized digitize point point param u u Parameter parameter value value vor vor P p private static double newtonRaphsonRootFind newton raphson root find Point2D point2 d Double Q q Point2D point2 d Double P p double u u double numerator numerator denominator denominator Point2D point2 d Double Q1 q1 new Point2D point2 d Double 3 3 Q2 q2 new Point2D point2 d Double 2 2 Q q and and Q q Point2D point2 d Double Q q u u new Point2D point2 d Double Q1 q1 u u new Point2D point2 d Double Q2 q2 u u new Point2D point2 d Double u u evaluated evaluate at at Q q Q q Q q double uPrime u prime Improved improve u u int i i Compute compute Q q u u Q q u u bezierII bezi i i 3 3 Q q u u Generate generate control control vertices vertex for Q q for i i 0 0 i i 2 2 i++ i++ Q1 q1 i i new Point2D point2 d Double Q q i+1 i+1 x x Q q i i x x 3 3 0 0 Q q i+1 i+1 y y Q q i i y y 3 3 0 0 Generate generate control control vertices vertex for Q q for i i 0 0 i i 1 1 i++ i++ Q2 q2 i i new Point2D point2 d Double Q1 q1 i+1 i+1 x x Q1 q1 i i x x 2 2 0 0 Q1 q1 i+1 i+1 y y Q1 q1 i i y y 2 2 0 0 Compute compute Q q u u and and Q q u u Q1 q1 u u bezierII bezi i i 2 2 Q1 q1 u u Q2 q2 u u bezierII bezi i i 1 1 Q2 q2 u u Compute compute f f u u f f u u numerator numerator Q q u u x x P p x x Q1 q1 u u x x + + Q q u u y y P p y y Q1 q1 u u y y denominator denominator Q1 q1 u u x x Q1 q1 u u x x + + Q1 q1 u u y y Q1 q1 u u y y + + Q q u u x x P p x x Q2 q2 u u x x + + Q q u u y y P p y y Q2 q2 u u y y u u u u f f u u f f u u uPrime u prime u u numerator numerator denominator denominator return uPrime u prime Evaluate evaluate a a Bezier bezi curve curve at at a a particular particular parameter parameter value value param degree degree The the degree degree of of the the bezier bezi curve curve param V v Array of of control control points point param t t Parametric parametric value value to to find find point point for private static Point2D point2 d Double bezierII bezi i i int degree degree Point2D point2 d Double V v double t t int i i j j Point2D point2 d Double Q q Point point on on curve curve at at parameter parameter t t Point2D point2 d Double Vtemp vtemp Local local copy copy of of control control points point Copy copy array Vtemp vtemp new Point2D point2 d Double degree+1 degree+1 for i i 0 0 i i degree degree i++ i++ Vtemp vtemp i i Point2D point2 d Double V v i i clone clone Triangle triangle computation computation for i i 1 1 i i degree degree i++ i++ for j j 0 0 j j degree degree i i j++ j++ Vtemp vtemp j j x x 1 1 0 0 t t Vtemp vtemp j j x x + + t t Vtemp vtemp j+1 j+1 x x Vtemp vtemp j j y y 1 1 0 0 t t Vtemp vtemp j j y y + + t t Vtemp vtemp j+1 j+1 y y Q q Vtemp vtemp 0 0 return Q q B0 b0 B1 b1 B2 b2 B3 b3 Bezier bezi multipliers multiplier private static double b0 b0 double u u double tmp tmp 1 1 0 0 u u return tmp tmp tmp tmp tmp tmp private static double b1 b1 double u u double tmp tmp 1 1 0 0 u u return 3 3 u u tmp tmp tmp tmp private static double b2 b2 double u u double tmp tmp 1 1 0 0 u u return 3 3 u u u u tmp tmp private static double b3 b3 double u u return u u u u u u Approximate approximate unit unit tangents tangent at at left left endpoint endpoint of of digitized digitize curve curve param d d Digitized digitize points point param end end Index index to to left left end end of of region region private static Point2D point2 d Double computeLeftTangent compute left tangent Point2D point2 d Double d d int end end Point2D point2 d Double tHat1 t hat1 new Point2D point2 d Double tHat1 t hat1 v2SubII v2 sub i i d d end+1 end+1 d d end end tHat1 t hat1 v2Normalize v2 normalize tHat1 t hat1 return tHat1 t hat1 Approximate approximate unit unit tangents tangent at at right right endpoint endpoint of of digitized digitize curve curve param d d Digitized digitize points point param end end Index index to to right right end end of of region region private static Point2D point2 d Double computeRightTangent compute right tangent Point2D point2 d Double d d int end end Point2D point2 d Double tHat2 t hat2 new Point2D point2 d Double tHat2 t hat2 v2SubII v2 sub i i d d end end 1 1 d d end end tHat2 t hat2 v2Normalize v2 normalize tHat2 t hat2 return tHat2 t hat2 Approximate approximate unit unit tangents tangent at at center center of of digitized digitize curve curve param d d Digitized digitize points point param center center Index index to to center center end end of of region region private static Point2D point2 d Double computeCenterTangent compute center tangent Point2D point2 d Double d d int center center Point2D point2 d Double V1 v1 new Point2D point2 d Double V2 v2 new Point2D point2 d Double tHatCenter t hat center new Point2D point2 d Double V1 v1 v2SubII v2 sub i i d d center center 1 1 d d center center V2 v2 v2SubII v2 sub i i d d center center d d center+1 center+1 tHatCenter t hat center x x V1 v1 x x + + V2 v2 x x 2 2 0 0 tHatCenter t hat center y y V1 v1 y y + + V2 v2 y y 2 2 0 0 tHatCenter t hat center v2Normalize v2 normalize tHatCenter t hat center return tHatCenter t hat center Assign assign parameter parameter values value to to digitized digitize points point using using relative relative distances distance between between points point param d d Digitized digitize points point param first first Indice indice of of first first point point of of region region in in d d param last last Indice indice of of last last point point of of region region in in d d private static double chordLengthParameterize chord length parameterize Point2D point2 d Double d d int first first int last last int i i double u u Parameterization parameterization u u new double last last first+1 first+1 u u 0 0 0 0 0 0 for i i first+1 first+1 i i last last i++ i++ u u i i first first u u i i first first 1 1 + + v2DistanceBetween2Points v2 distance between2 point d d i i d d i i 1 1 for i i first first + + 1 1 i i last last i++ i++ u u i i first first u u i i first first u u last last first first return u u Find find the the maximum maximum squared square distance distance of of digitized digitize points point to to fitted fit curve curve param d d Digitized digitize points point param first first Indice indice of of first first point point of of region region in in d d param last last Indice indice of of last last point point of of region region in in d d param bezCurve bez curve Fitted fit Bezier bezi curve curve param u u Parameterization parameterization of of points point param splitPoint split point Point point of of maximum maximum error input input output output parameter parameter must must be be an an array of of 1 1 private static double computeMaxError compute max Point2D point2 d Double d d int first first int last last Point2D point2 d Double bezCurve bez curve double u u int splitPoint split point int i i double maxDist max dist Maximum maximum error double dist dist Current current error Point2D point2 d Double P p new Point2D point2 d Double Point point on on curve curve Point2D point2 d Double v v new Point2D point2 d Double Vector vector from from point point to to curve curve splitPoint split point 0 0 last last first first + + 1 1 2 2 maxDist max dist 0 0 0 0 for i i first first + + 1 1 i i last last i++ i++ P p bezierII bezi i i 3 3 bezCurve bez curve u u i i first first v v v2SubII v2 sub i i P p d d i i dist dist v2SquaredLength v2 square length v v if dist dist maxDist max dist maxDist max dist dist dist splitPoint split point 0 0 i i return maxDist max dist private static Point2D point2 d Double v2AddII v2 add i i Point2D point2 d Double a a Point2D point2 d Double b b Point2D point2 d Double c c new Point2D point2 d Double c c x x a a x x + + b b x x c c y y a a y y + + b b y y return c c private static Point2D point2 d Double v2ScaleIII v2 scale i i i Point2D point2 d Double v v double s s Point2D point2 d Double result result new Point2D point2 d Double result result x x v v x x s s result result y y v v y y s s return result result private static Point2D point2 d Double v2SubII v2 sub i i Point2D point2 d Double a a Point2D point2 d Double b b Point2D point2 d Double c c new Point2D point2 d Double c c x x a a x x b b x x c c y y a a y y b b y y return c c GraphicsGems graphic gem c c 2d 2d and and 3d 3d Vector vector C c Library library by by Andrew andrew Glassner glassn from from Graphics graphic Gems gem Academic academic Press press 1990 1990 Return the the distance distance between between two two points point private static double v2DistanceBetween2Points v2 distance between2 point Point2D point2 d Double a a Point2D point2 d Double b b double dx dx a a x x b b x x double dy dy a a y y b b y y return Math math sqrt sqrt dx dx dx dx + + dy dy dy dy Scales scale the the input input vector vector to to the the new length length and and returns it it private static Point2D point2 d Double v2Scale v2 scale Point2D point2 d Double v v double newlen newlen double len len v2Length v2 length v v if len len 0 0 0 0 v v x x newlen newlen len len v v y y newlen newlen len len return v v Returns length length of of input input vector vector private static double v2Length v2 length Point2D point2 d Double a a return Math math sqrt sqrt v2SquaredLength v2 square length a a Returns squared square length length of of input input vector vector private static double v2SquaredLength v2 square length Point2D point2 d Double a a return a a x x a a x x + + a a y y a a y y Return vector vector sum sum c c a+b a+b private static Point2D point2 d Double v2Add v2 add Point2D point2 d Double a a Point2D point2 d Double b b Point2D point2 d Double c c c c x x a a x+b x+b x x c c y y a a y+b y+b y y return c c Negates negate the the input input vector vector and and returns it it private static Point2D point2 d Double v2Negate v2 negate Point2D point2 d Double v v v v x x v v x x v v y y v v y y return v v Return the the dot dot product product of of vectors vector a a and and b b private static double v2Dot v2 dot Point2D point2 d Double a a Point2D point2 d Double b b return a a x x b b x x + + a a y y b b y y Normalizes normaliz the the input input vector vector and and returns it it private static Point2D point2 d Double v2Normalize v2 normalize Point2D point2 d Double v v double len len v2Length v2 length v v if len len 0 0 0 0 v v x x len len v v y y len len return v v 