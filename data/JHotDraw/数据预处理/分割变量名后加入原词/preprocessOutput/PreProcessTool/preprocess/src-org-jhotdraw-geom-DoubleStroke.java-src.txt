DoubleStroke stroke java 1 1 0 0 2006 2006 06 06 18 18 Copyright copyright c c 1996 1996 2006 2006 by by the the original original authors author of of JHotDraw jhotdraw and and all all its it contributors contributor JHotDraw jhotdraw org org All all rights right reserved reserve This software software is is the the confidential confidential and and proprietary proprietary information information of of JHotDraw jhotdraw org org Confidential confidential Information information You you shall shall not not disclose disclose such such Confidential confidential Information information and and shall shall use use it it only only in in accordance accordance with with the the terms term of of the the license license agreement agreement you you entered enter into into with with JHotDraw jhotdraw org org package org org jhotdraw jhotdraw geom geom import java awt awt import java awt awt geom geom import java awt awt font font Draws draw a a double stroke stroke an an outline outline of of an an outline outline The the inner inner width width of of a a DoubleStroke stroke defines define the the distance distance between between the the two two outlines outline being being drawn draw The the outline outline width width of of a a DoubleStroke stroke defines define the the thickness thickness of of the the outline outline author author Werner wern Randelshofer randelshof version 1 1 0 0 2006 2006 06 06 18 18 Fixed fix bugs bug br 1 1 0 0 21 21 March march 2006 2006 Created create public class DoubleStroke stroke implements Stroke stroke private BasicStroke basic stroke outlineStroke outline stroke private float innerWidth inner width private float outlineWidth outline width private double miterLimit miter limit private float dashes dash private float dashPhase dash phase public DoubleStroke stroke float innerWidth inner width float outlineWidth outline width this innerWidth inner width outlineWidth outline width BasicStroke basic stroke CAP c a p SQUARE s q u a r e BasicStroke basic stroke JOIN j o i n BEVEL b e v e l 10f 10f null 0f 0f public DoubleStroke stroke float innerWidth inner width float outlineWidth outline width int cap cap int join join float miterLimit miter limit float dashes dash float dashPhase dash phase this innerWidth inner width innerWidth inner width this outlineWidth outline width outlineWidth outline width this miterLimit miter limit miterLimit miter limit outlineStroke outline stroke new BasicStroke basic stroke outlineWidth outline width cap cap join join miterLimit miter limit dashes dash dashPhase dash phase outlineStroke outline stroke new BasicStroke basic stroke outlineWidth outline width cap cap BasicStroke basic stroke JOIN j o i n BEVEL b e v e l miterLimit miter limit dashes dash dashPhase dash phase public Shape shape createStrokedShape create stroke shape Shape shape s s BezierPath bezi path bp bp new BezierPath bezi path GeneralPath general path left left new GeneralPath general path GeneralPath general path right right new GeneralPath general path double coords coord new double 6 6 FIXME f i x m e We we only only do a a flattened flatten path path for PathIterator path iterator i i s s getPathIterator get path iterator null 0 0 1d 1d i i isDone is i i next next int type type i i currentSegment current segment coords coord switch type type case PathIterator path iterator SEG s e g MOVETO m o v e t o if bp bp size size 0 0 traceStroke trace stroke bp bp left left right right bp bp clear clear bp bp setClosed set close false bp bp moveTo move to coords coord 0 0 coords coord 1 1 break case PathIterator path iterator SEG s e g LINETO l i n e t o if coords coord 0 0 bp bp get get bp bp size size 1 1 x x 0 0 || || coords coord 1 1 bp bp get get bp bp size size 1 1 y y 0 0 bp bp lineTo line to coords coord 0 0 coords coord 1 1 break case PathIterator path iterator SEG s e g QUADTO q u a d t o bp bp quadTo quad to coords coord 0 0 coords coord 1 1 coords coord 2 2 coords coord 3 3 break case PathIterator path iterator SEG s e g CUBICTO c u b i c t o bp bp curveTo curve to coords coord 0 0 coords coord 1 1 coords coord 2 2 coords coord 3 3 coords coord 4 4 coords coord 5 5 break case PathIterator path iterator SEG s e g CLOSE c l o s e bp bp setClosed set close true break if bp bp size size 0 0 traceStroke trace stroke bp bp left left right right Note note This could could be be extended extend to to use use different different stroke stroke objects for the the inner inner and and the the outher outh path path right right append append left left false return outlineStroke outline stroke createStrokedShape create stroke shape right right protected void traceStroke trace stroke BezierPath bezi path bp bp GeneralPath general path left left GeneralPath general path right right XXX x x x We we only only support support straight straight line line segments segment here here Corners corner of of the the current current and and the the previous previou thick thick line line double currentCorners current corner new double 8 8 double prevCorners prev corner new double 8 8 Point2D point2 d Double intersect intersect Remove remove duplicate duplicate nodes node from from bezier bezi path path if bp bp isClosed is close BezierPath bezi path Node node prev prev bp bp get get bp bp size size 1 1 for int i i 0 0 i i bp bp size size i++ i++ BezierPath bezi path Node node node node bp bp get get i i if prev prev x x 0 0 node node x x 0 0 prev prev y y 0 0 node node y y 0 0 bp bp remove remove i i else prev prev node node else BezierPath bezi path Node node prev prev bp bp get get 0 0 for int i i 1 1 i i bp bp size size i++ i++ BezierPath bezi path Node node node node bp bp get get i i if prev prev x x 0 0 node node x x 0 0 prev prev y y 0 0 node node y y 0 0 bp bp remove remove i i else prev prev node node Handle handle the the first first point point of of the the bezier bezi path path if bp bp isClosed is close bp bp size size 1 1 prevCorners prev corner computeThickLine compute thick line bp bp get get bp bp size size 1 1 x x 0 0 bp bp get get bp bp size size 1 1 y y 0 0 bp bp get get 0 0 x x 0 0 bp bp get get 0 0 y y 0 0 innerWidth inner width prevCorners prev corner currentCorners current corner computeThickLine compute thick line bp bp get get 0 0 x x 0 0 bp bp get get 0 0 y y 0 0 bp bp get get 1 1 x x 0 0 bp bp get get 1 1 y y 0 0 innerWidth inner width currentCorners current corner intersect intersect Geom geom intersect intersect prevCorners prev corner 0 0 prevCorners prev corner 1 1 prevCorners prev corner 4 4 prevCorners prev corner 5 5 currentCorners current corner 0 0 currentCorners current corner 1 1 currentCorners current corner 4 4 currentCorners current corner 5 5 miterLimit miter limit if intersect intersect null right right moveTo move to float intersect intersect x x float intersect intersect y y else right right moveTo move to float prevCorners prev corner 4 4 float prevCorners prev corner 5 5 right right lineTo line to float currentCorners current corner 0 0 float currentCorners current corner 1 1 intersect intersect Geom geom intersect intersect prevCorners prev corner 2 2 prevCorners prev corner 3 3 prevCorners prev corner 6 6 prevCorners prev corner 7 7 currentCorners current corner 2 2 currentCorners current corner 3 3 currentCorners current corner 6 6 currentCorners current corner 7 7 miterLimit miter limit if intersect intersect null left left moveTo move to float intersect intersect x x float intersect intersect y y else left left moveTo move to float prevCorners prev corner 6 6 float prevCorners prev corner 7 7 left left lineTo line to float currentCorners current corner 2 2 float currentCorners current corner 3 3 else if bp bp size size 1 1 currentCorners current corner computeThickLine compute thick line bp bp get get 0 0 x x 0 0 bp bp get get 0 0 y y 0 0 bp bp get get 1 1 x x 0 0 bp bp get get 1 1 y y 0 0 innerWidth inner width currentCorners current corner right right moveTo move to float currentCorners current corner 0 0 float currentCorners current corner 1 1 left left moveTo move to float currentCorners current corner 2 2 float currentCorners current corner 3 3 Handle handle points point in in the the middle middle of of the the bezier bezi path path for int i i 1 1 n n bp bp size size 1 1 i i n n i++ i++ double tmp tmp prevCorners prev corner prevCorners prev corner currentCorners current corner currentCorners current corner computeThickLine compute thick line bp bp get get i i x x 0 0 bp bp get get i i y y 0 0 bp bp get get i+1 i+1 x x 0 0 bp bp get get i+1 i+1 y y 0 0 innerWidth inner width tmp tmp intersect intersect Geom geom intersect intersect prevCorners prev corner 0 0 prevCorners prev corner 1 1 prevCorners prev corner 4 4 prevCorners prev corner 5 5 currentCorners current corner 0 0 currentCorners current corner 1 1 currentCorners current corner 4 4 currentCorners current corner 5 5 miterLimit miter limit if intersect intersect null right right lineTo line to float intersect intersect x x float intersect intersect y y else right right lineTo line to float prevCorners prev corner 4 4 float prevCorners prev corner 5 5 right right lineTo line to float currentCorners current corner 0 0 float currentCorners current corner 1 1 intersect intersect Geom geom intersect intersect prevCorners prev corner 2 2 prevCorners prev corner 3 3 prevCorners prev corner 6 6 prevCorners prev corner 7 7 currentCorners current corner 2 2 currentCorners current corner 3 3 currentCorners current corner 6 6 currentCorners current corner 7 7 miterLimit miter limit if intersect intersect null left left lineTo line to float intersect intersect x x float intersect intersect y y else left left lineTo line to float prevCorners prev corner 6 6 float prevCorners prev corner 7 7 left left lineTo line to float currentCorners current corner 2 2 float currentCorners current corner 3 3 Handle handle the the last last point point of of the the bezier bezi path path if bp bp isClosed is close double tmp tmp prevCorners prev corner prevCorners prev corner currentCorners current corner currentCorners current corner computeThickLine compute thick line bp bp get get bp bp size size 1 1 x x 0 0 bp bp get get bp bp size size 1 1 y y 0 0 bp bp get get 0 0 x x 0 0 bp bp get get 0 0 y y 0 0 bp bp get get 1 1 x x 0 0 bp bp get get 1 1 y y 0 0 innerWidth inner width tmp tmp intersect intersect Geom geom intersect intersect prevCorners prev corner 0 0 prevCorners prev corner 1 1 prevCorners prev corner 4 4 prevCorners prev corner 5 5 currentCorners current corner 0 0 currentCorners current corner 1 1 currentCorners current corner 4 4 currentCorners current corner 5 5 miterLimit miter limit if intersect intersect null right right lineTo line to float intersect intersect x x float intersect intersect y y else right right lineTo line to float prevCorners prev corner 4 4 float prevCorners prev corner 5 5 right right lineTo line to float currentCorners current corner 0 0 float currentCorners current corner 1 1 intersect intersect Geom geom intersect intersect prevCorners prev corner 2 2 prevCorners prev corner 3 3 prevCorners prev corner 6 6 prevCorners prev corner 7 7 currentCorners current corner 2 2 currentCorners current corner 3 3 currentCorners current corner 6 6 currentCorners current corner 7 7 miterLimit miter limit if intersect intersect null left left lineTo line to float intersect intersect x x float intersect intersect y y else left left lineTo line to float prevCorners prev corner 6 6 float prevCorners prev corner 7 7 left left lineTo line to float currentCorners current corner 2 2 float currentCorners current corner 3 3 right right closePath close path left left closePath close path else right right lineTo line to float currentCorners current corner 4 4 float currentCorners current corner 5 5 left left lineTo line to float currentCorners current corner 6 6 float currentCorners current corner 7 7 private double computeThickLine compute thick line double seg seg int offset offset double corners corner return computeThickLine compute thick line seg seg 0+offset 0+offset seg seg 1+offset 1+offset seg seg 2+offset 2+offset seg seg 3+offset 3+offset innerWidth inner width corners corner private double computeThickLine compute thick line double x1 x1 double y1 y1 double x2 x2 double y2 y2 double thickness thickness double corners corner double dx dx x2 x2 x1 x1 double dy dy y2 y2 y1 y1 line line length length double lineLength line length Math math sqrt sqrt dx dx dx dx + + dy dy dy dy double scale scale thickness thickness 2d 2d lineLength line length The the x x and and y y increments increment from from an an endpoint endpoint needed need to to create create a a rectangle rectangle double ddx ddx scale scale dy dy double ddy ddy scale scale dx dx ddx ddx + + ddx ddx 0 0 ? ? 0 0 5 5 0 0 5 5 ddy ddy + + ddy ddy 0 0 ? ? 0 0 5 5 0 0 5 5 Now now we we can can compute compute the the corner corner points point corners corner 0 0 x1 x1 + + ddx ddx corners corner 1 1 y1 y1 + + ddy ddy corners corner 2 2 x1 x1 ddx ddx corners corner 3 3 y1 y1 ddy ddy corners corner 4 4 x2 x2 + + ddx ddx corners corner 5 5 y2 y2 + + ddy ddy corners corner 6 6 x2 x2 ddx ddx corners corner 7 7 y2 y2 ddy ddy return corners corner 