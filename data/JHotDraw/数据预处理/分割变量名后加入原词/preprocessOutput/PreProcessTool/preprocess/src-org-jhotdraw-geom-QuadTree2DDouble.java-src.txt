QuadTree2DDouble quad tree2 d java 1 1 0 0 2006 2006 01 01 14 14 Copyright copyright c c 1996 1996 2006 2006 by by the the original original authors author of of JHotDraw jhotdraw and and all all its it contributors contributor JHotDraw jhotdraw org org All all rights right reserved reserve This software software is is the the confidential confidential and and proprietary proprietary information information of of JHotDraw jhotdraw org org Confidential confidential Information information You you shall shall not not disclose disclose such such Confidential confidential Information information and and shall shall use use it it only only in in accordance accordance with with the the terms term of of the the license license agreement agreement you you entered enter into into with with JHotDraw jhotdraw org org ??? ??? package org org jhotdraw jhotdraw geom geom import java awt awt geom geom import java util util import java awt awt QuadTree2DDouble quad tree2 d author author Werner wern Randelshofer randelshof version 1 1 0 0 2006 2006 01 01 14 14 Derived derive from from class QuadTree quad tree public class QuadTree2DDouble quad tree2 d T t private HashMap hash map T t Rectangle2D rectangle2 d Double outside outside new HashMap hash map T t Rectangle2D rectangle2 d Double private QuadNode quad node root root private int maxCapacity max capacity 32 32 private int minSize min size 32 32 private int maxOutside max outside 32 32 Creates create a a new instance instance public QuadTree2DDouble quad tree2 d root root new QuadNode quad node new Rectangle2D rectangle2 d Double 0 0 0 0 800 800 600 600 public QuadTree2DDouble quad tree2 d Rectangle2D rectangle2 d Double bounds bound root root new QuadNode quad node bounds bound public void add add T t o o Rectangle2D rectangle2 d Double bounds bound if root root bounds bound contains contain bounds bound root root add add o o Rectangle2D rectangle2 d Double bounds bound clone clone else outside outside put put o o Rectangle2D rectangle2 d Double bounds bound clone clone if outside outside size size maxOutside max outside reorganize reorganize public void reorganize reorganize root root join join outside outside putAll put all root root objects root root objects clear clear Iterator iterator Map map Entry entry T t Rectangle2D rectangle2 d Double i i outside outside entrySet entry set iterator iterator Map map Entry entry T t Rectangle2D rectangle2 d Double entry entry i i next next Rectangle2D rectangle2 d Double treeBounds tree bound Rectangle2D rectangle2 d Double entry entry getValue get value clone clone while i i hasNext ha next entry entry i i next next Rectangle2D rectangle2 d Double bounds bound entry entry getValue get value treeBounds tree bound add add bounds bound root root bounds bound treeBounds tree bound i i outside outside entrySet entry set iterator iterator while i i hasNext ha next entry entry i i next next root root add add entry entry getKey get key entry entry getValue get value outside outside clear clear public void remove remove T t o o outside outside remove remove o o root root remove remove o o public Collection collection T t findContains find contain Point2D point2 d Double p p HashSet hash set T t result result new HashSet hash set T t root root findContains find contain p p result result for Map map Entry entry T t Rectangle2D rectangle2 d Double entry entry outside outside entrySet entry set if entry entry getValue get value contains contain p p result result add add entry entry getKey get key return result result public Collection collection T t findIntersects find intersect Rectangle2D rectangle2 d r r return findIntersects find intersect new Rectangle2D rectangle2 d Double r r getX get x r r getY get y r r getWidth get width r r getHeight get height public Collection collection T t findIntersects find intersect Rectangle2D rectangle2 d Double r r HashSet hash set T t result result new HashSet hash set T t root root findIntersects find intersect r r result result for Map map Entry entry T t Rectangle2D rectangle2 d Double entry entry outside outside entrySet entry set if entry entry getValue get value intersects intersect r r result result add add entry entry getKey get key return result result public Collection collection T t findInside find inside Rectangle2D rectangle2 d Double r r HashSet hash set T t result result new HashSet hash set T t root root findInside find inside r r result result for Map map Entry entry T t Rectangle2D rectangle2 d Double entry entry outside outside entrySet entry set if r r contains contain entry entry getValue get value result result add add entry entry getKey get key return result result private class QuadNode quad node private Rectangle2D rectangle2 d Double bounds bound We we store store an an object into into this map map if 1 1 the the bounds bound of of the the object contain contain our our bounds bound or or 2 2 we we are are a a leaf leaf key key Object value value Rectangle2D rectangle2 d Double private HashMap hash map T t Rectangle2D rectangle2 d Double objects private QuadNode quad node northEast north east private QuadNode quad node northWest north west private QuadNode quad node southEast south east private QuadNode quad node southWest south west public QuadNode quad node Rectangle2D rectangle2 d Double bounds bound this bounds bound bounds bound this objects new HashMap hash map T t Rectangle2D rectangle2 d Double public boolean isLeaf is leaf return northEast north east null public void remove remove T t o o if objects remove remove o o null isLeaf is leaf northEast north east remove remove o o northWest north west remove remove o o southEast south east remove remove o o southWest south west remove remove o o public void add add T t o o Rectangle2D rectangle2 d Double oBounds o bound Do we we have have to to split? split? if isLeaf is leaf objects size size maxCapacity max capacity bounds bound width width minSize min size bounds bound height height minSize min size split split if isLeaf is leaf || || oBounds o bound contains contain bounds bound We we put put an an object into into our our hashtable hashtable if we we are are a a leaf leaf or or if the the bounds bound of of the the object contain contain our our bounds bound objects put put o o oBounds o bound else if northEast north east bounds bound intersects intersect oBounds o bound northEast north east add add o o oBounds o bound if northWest north west bounds bound intersects intersect oBounds o bound northWest north west add add o o oBounds o bound if southEast south east bounds bound intersects intersect oBounds o bound southEast south east add add o o oBounds o bound if southWest south west bounds bound intersects intersect oBounds o bound southWest south west add add o o oBounds o bound public void split split if isLeaf is leaf double hw hw bounds bound width width 2 2 double hh hh bounds bound height height 2 2 northWest north west new QuadNode quad node new Rectangle2D rectangle2 d Double bounds bound x x bounds bound y y hw hw hh hh northEast north east new QuadNode quad node new Rectangle2D rectangle2 d Double bounds bound x x + + hw hw bounds bound y y bounds bound width width hw hw hh hh southWest south west new QuadNode quad node new Rectangle2D rectangle2 d Double bounds bound x x bounds bound y y + + hh hh hw hw bounds bound height height hh hh southEast south east new QuadNode quad node new Rectangle2D rectangle2 d Double bounds bound x x + + hw hw bounds bound y y + + hh hh bounds bound width width hw hw bounds bound height height hh hh HashMap hash map T t Rectangle2D rectangle2 d Double temp temp objects objects new HashMap hash map T t Rectangle2D rectangle2 d Double for Map map Entry entry T t Rectangle2D rectangle2 d Double entry entry temp temp entrySet entry set add add entry entry getKey get key entry entry getValue get value public void join join if isLeaf is leaf northWest north west join join northEast north east join join southWest south west join join southEast south east join join objects putAll put all northWest north west objects objects putAll put all northEast north east objects objects putAll put all southWest south west objects objects putAll put all southEast south east objects northWest north west null northEast north east null southWest south west null southEast south east null public void findContains find contain Point2D point2 d Double p p HashSet hash set T t result result if bounds bound contains contain p p for Map map Entry entry T t Rectangle2D rectangle2 d Double entry entry objects entrySet entry set if entry entry getValue get value contains contain p p result result add add entry entry getKey get key if isLeaf is leaf northWest north west findContains find contain p p result result northEast north east findContains find contain p p result result southWest south west findContains find contain p p result result southEast south east findContains find contain p p result result public void findIntersects find intersect Rectangle2D rectangle2 d Double r r HashSet hash set T t result result if bounds bound intersects intersect r r int oldSize old size result result size size for Map map Entry entry T t Rectangle2D rectangle2 d Double entry entry objects entrySet entry set if entry entry getValue get value intersects intersect r r result result add add entry entry getKey get key if isLeaf is leaf northWest north west findIntersects find intersect r r result result northEast north east findIntersects find intersect r r result result southWest south west findIntersects find intersect r r result result southEast south east findIntersects find intersect r r result result public void findInside find inside Rectangle2D rectangle2 d Double r r HashSet hash set T t result result if bounds bound intersects intersect r r for Map map Entry entry T t Rectangle2D rectangle2 d Double entry entry objects entrySet entry set if r r contains contain entry entry getValue get value result result add add entry entry getKey get key if isLeaf is leaf northWest north west findInside find inside r r result result northEast north east findInside find inside r r result result southWest south west findInside find inside r r result result southEast south east findInside find inside r r result result 