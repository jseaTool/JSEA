BezierBezierLineConnection bezi bezi line connection java 1 1 0 0 1 1 2006 2006 02 02 06 06 Copyright copyright c c 1996 1996 2006 2006 by by the the original original authors author of of JHotDraw jhotdraw and and all all its it contributors contributor JHotDraw jhotdraw org org All all rights right reserved reserve This software software is is the the confidential confidential and and proprietary proprietary information information of of JHotDraw jhotdraw org org Confidential confidential Information information You you shall shall not not disclose disclose such such Confidential confidential Information information and and shall shall use use it it only only in in accordance accordance with with the the terms term of of the the license license agreement agreement you you entered enter into into with with JHotDraw jhotdraw org org package org org jhotdraw jhotdraw draw draw import org org jhotdraw jhotdraw util util import java awt awt import java awt awt event event import java awt awt geom geom import java util util import javax javax swing swing undo undo import java io io import org org jhotdraw jhotdraw geom geom import org org jhotdraw jhotdraw xml xml DOMInput dom input import org org jhotdraw jhotdraw xml xml DOMOutput dom output A a LineConnection line connection is is a a standard standard implementation of of the the ConnectionFigure connection figure interface The the interface is is implemented with with BezierFigure bezi figure author author Werner wern Randelshofer randelshof version 1 1 0 0 1 1 2006 2006 02 02 06 06 Fixed fix redo redo bug bug br 1 1 0 0 23 23 Januar januar 2006 2006 Created create public class LineConnectionFigure line connection figure extends LineFigure line figure implements ConnectionFigure connection figure private Connector connector startConnector start connector private Connector connector endConnector end connector private Liner liner liner liner Handles handle figure figure changes change in in the the start start and and the the end end figure figure private ConnectionHandler connection handler connectionHandler connection handler new ConnectionHandler connection handler this private static class ConnectionHandler connection handler implements FigureListener figure listener private LineConnectionFigure line connection figure owner owner private ConnectionHandler connection handler LineConnectionFigure line connection figure owner owner this owner owner owner owner public void figureRequestRemove figure request remove FigureEvent figure event e e public void figureRemoved figure remove FigureEvent figure event evt evt The the commented comment lines line below below must must stay stay commented comment out out This is is because because we we must must not not set set our our connectors connector to to null in in order order to to support support reconnection reconnection using using redo redo if evt evt getFigure get figure owner owner getStartFigure get start figure || || evt evt getFigure get figure owner owner getEndFigure get end figure owner owner setStartConnector set start connector null owner owner setEndConnector set end connector null owner owner fireFigureRequestRemove fire figure request remove public void figureChanged figure change FigureEvent figure event e e if e e getSource get source owner owner getStartFigure get start figure || || e e getSource get source owner owner getEndFigure get end figure owner owner willChange will change owner owner updateConnection update connection owner owner changed change public void figureAdded figure add FigureEvent figure event e e public void figureAttributeChanged figure attribute change FigureEvent figure event e e public void figureAreaInvalidated figure area invalidate FigureEvent figure event e e Creates create a a new instance instance public LineConnectionFigure line connection figure DRAWING d r a w i n g SHAPE s h a p e AND a n d BOUNDS b o u n d s Ensures ensure that that a a connection connection is is updated update if the the connection connection was wa moved move public void basicTransform basic transform AffineTransform affine transform tx tx super basicTransform basic transform tx tx updateConnection update connection make make sure sure that that we we are are still still connected connect ATTRIBUTES a t t r i b u t e s EDITING e d i t i n g Gets get the the handles handle of of the the figure figure It it returns the the normal normal PolylineHandles polyline handle but but adds add ChangeConnectionHandles change connection handle at at the the start start and and end end public Collection collection Handle handle createHandles create handle int detailLevel detail level ArrayList list Handle handle handles handle new ArrayList list Handle handle getNodeCount get node count switch detailLevel detail level case 0 0 if getLiner get liner null for int i i 1 1 n n getNodeCount get node count 1 1 i i n n i++ i++ handles handle add add new BezierNodeHandle bezi node handle this i i handles handle add add new ChangeConnectionStartHandle change connection start handle this handles handle add add new ChangeConnectionEndHandle change connection end handle this break return handles handle CONNECTING c o n n e c t i n g Tests test whether wheth a a figure figure can can be be a a connection connection target target ConnectionFigures connection figure cannot cannot be be connected connect and and return false public boolean canConnect can connect return false public void updateConnection update connection willChange will change if getStartConnector get start connector null Point2D point2 d Double start start getStartConnector get start connector findStart find start this if start start null basicSetStartPoint basic set start point start start if getEndConnector get end connector null Point2D point2 d Double end end getEndConnector get end connector findEnd find end this if end end null basicSetEndPoint basic set end point end end changed change public void validate validate super validate validate lineout lineout public boolean canConnect can connect Figure figure start start Figure figure end end return start start canConnect can connect end end canConnect can connect public boolean connectsSame connect same ConnectionFigure connection figure other other return other other getStartConnector get start connector getStartConnector get start connector other other getEndConnector get end connector getEndConnector get end connector public Connector connector getEndConnector get end connector return endConnector end connector public Figure figure getEndFigure get end figure return endConnector end connector null ? ? null endConnector end connector getOwner get owner public Connector connector getStartConnector get start connector return startConnector start connector public Figure figure getStartFigure get start figure return startConnector start connector null ? ? null startConnector start connector getOwner get owner Note note this method is is only only final for testing testing purposes purpose You you can can remove remove the the final keywoard keywoard at at any any time time public final void setEndConnector set end connector final Connector connector newEnd end final Connector connector oldEnd old end endConnector end connector if newEnd end oldEnd old end willChange will change basicSetEndConnector basic set end connector newEnd end fireUndoableEditHappened fire undoable edit happen new AbstractUndoableEdit undoable edit public String getPresentationName get presentation name return End end Verbindung verbindung setzen setzen public void undo undo throws CannotUndoException cannot undo super undo undo willChange will change basicSetEndConnector basic set end connector oldEnd old end changed change public void redo redo throws CannotUndoException cannot undo super redo redo willChange will change basicSetEndConnector basic set end connector newEnd end changed change changed change protected void basicSetEndConnector basic set end connector Connector connector newEnd end if newEnd end endConnector end connector if endConnector end connector null getEndFigure get end figure removeFigureListener remove figure listener connectionHandler connection handler if getStartFigure get start figure null handleDisconnect handle disconnect getStartFigure get start figure getEndFigure get end figure endConnector end connector newEnd end if endConnector end connector null getEndFigure get end figure addFigureListener add figure listener connectionHandler connection handler if getStartFigure get start figure null getEndFigure get end figure null handleConnect handle connect getStartFigure get start figure getEndFigure get end figure updateConnection update connection Note note this method is is only only final for testing testing purposes purpose You you can can remove remove the the final keywoard keywoard at at any any time time public final void setStartConnector set start connector final Connector connector newStart start final Connector connector oldStart old start startConnector start connector if newStart start oldStart old start willChange will change basicSetStartConnector basic set start connector newStart start fireUndoableEditHappened fire undoable edit happen new AbstractUndoableEdit undoable edit public String getPresentationName get presentation name return Start start Verbindung verbindung setzen setzen public void undo undo throws CannotUndoException cannot undo super undo undo willChange will change basicSetStartConnector basic set start connector oldStart old start changed change public void redo redo throws CannotUndoException cannot undo super redo redo willChange will change basicSetStartConnector basic set start connector newStart start changed change changed change public void basicSetStartConnector basic set start connector Connector connector newStart start if newStart start startConnector start connector if startConnector start connector null getStartFigure get start figure removeFigureListener remove figure listener connectionHandler connection handler if getEndFigure get end figure null handleDisconnect handle disconnect getStartFigure get start figure getEndFigure get end figure startConnector start connector newStart start if startConnector start connector null getStartFigure get start figure addFigureListener add figure listener connectionHandler connection handler if getStartFigure get start figure null getEndFigure get end figure null handleConnect handle connect getStartFigure get start figure getEndFigure get end figure updateConnection update connection COMPOSITE c o m p o s i t e FIGURES f i g u r e s LAYOUT l a y o u t public Liner liner getBezierPathLayouter get bezi path layout return Liner liner getAttribute get attribute BEZIER b e z i e r PATH p a t h LAYOUTER l a y o u t e r public void setBezierPathLayouter set bezi path layout Liner liner newValue value setAttribute set attribute BEZIER b e z i e r PATH p a t h LAYOUTER l a y o u t e r newValue value Lays lay out out the the connection connection This is is called call when when the the connection connection itself itself changes change By by default the the connection connection is is recalculated recalculate public void layoutConnection layout connection if getStartConnector get start connector null getEndConnector get end connector null willChange will change Liner liner bpl bpl getBezierPathLayouter get bezi path layout if bpl bpl null bpl bpl lineout lineout this else if getStartConnector get start connector null Point2D point2 d Double start start getStartConnector get start connector findStart find start this if start start null basicSetStartPoint basic set start point start start if getEndConnector get end connector null Point2D point2 d Double end end getEndConnector get end connector findEnd find end this if end end null basicSetEndPoint basic set end point end end changed change CLONING c l o n i n g EVENT e v e n t HANDLING h a n d l i n g public void addNotify add notify Drawing drawing drawing drawing super addNotify add notify drawing drawing if getStartConnector get start connector null getEndConnector get end connector null handleConnect handle connect getStartFigure get start figure getEndFigure get end figure public void removeNotify remove notify Drawing drawing drawing drawing setStartConnector set start connector null setEndConnector set end connector null if getStartConnector get start connector null getEndConnector get end connector null handleDisconnect handle disconnect getStartFigure get start figure getEndFigure get end figure super removeNotify remove notify drawing drawing Handles handle the the disconnection disconnection of of a a connection connection Override override this method to to handle handle this event event protected void handleDisconnect handle disconnect Figure figure start start Figure figure end end Handles handle the the connection connection of of a a connection connection Override override this method to to handle handle this event event protected void handleConnect handle connect Figure figure start start Figure figure end end public LineConnectionFigure line connection figure clone clone LineConnectionFigure line connection figure that that LineConnectionFigure line connection figure super clone clone that that connectionHandler connection handler new ConnectionHandler connection handler that that if this liner liner null that that liner liner Liner liner this liner liner clone clone That that shares share the the same same connectors connector that that this object has ha To to work work properly properly that that must must be be registered register as a a a figure figure listener listener to to the the connected connect figures figure if this startConnector start connector null that that startConnector start connector Connector connector this startConnector start connector clone clone that that getStartFigure get start figure addFigureListener add figure listener that that connectionHandler connection handler if this endConnector end connector null that that endConnector end connector Connector connector this endConnector end connector clone clone that that getEndFigure get end figure addFigureListener add figure listener that that connectionHandler connection handler if that that startConnector start connector null that that endConnector end connector null that that handleConnect handle connect that that getStartFigure get start figure that that getEndFigure get end figure that that updateConnection update connection return that that public void remap remap Map map oldToNew old to willChange will change super remap remap oldToNew old to Figure figure newStartFigure start figure null Figure figure newEndFigure end figure null if getStartFigure get start figure null newStartFigure start figure Figure figure oldToNew old to get get getStartFigure get start figure if newStartFigure start figure null newStartFigure start figure getStartFigure get start figure if getEndFigure get end figure null newEndFigure end figure Figure figure oldToNew old to get get getEndFigure get end figure if newEndFigure end figure null newEndFigure end figure getEndFigure get end figure if newStartFigure start figure null setStartConnector set start connector newStartFigure start figure findCompatibleConnector find compatible connector getStartConnector get start connector true if newEndFigure end figure null setEndConnector set end connector newEndFigure end figure findCompatibleConnector find compatible connector getEndConnector get end connector false updateConnection update connection changed change public boolean canConnect can connect Figure figure start start return start start canConnect can connect Handles handle a a mouse mouse click click public boolean handleMouseClick handle mouse click Point2D point2 d Double p p MouseEvent mouse event evt evt DrawingView drawing view view view if getLiner get liner null evt evt getClickCount get click count 2 2 willChange will change final int index index basicSplitSegment basic split segment p p float 5f 5f view view getScaleFactor get scale factor if index index 1 1 final BezierPath bezi path Node node newNode node getNode get node index index fireUndoableEditHappened fire undoable edit happen new AbstractUndoableEdit undoable edit public void redo redo throws CannotRedoException cannot redo super redo redo willChange will change basicAddNode basic add node index index newNode node changed change public void undo undo throws CannotUndoException cannot undo super undo undo willChange will change basicRemoveNode basic remove node index index changed change changed change return true return false PERSISTENCE p e r s i s t e n c e protected void readPoints read point DOMInput dom input in in throws IOException i o super readPoints read point in in in in openElement open element startConnector start connector setStartConnector set start connector Connector connector in in readObject read in in closeElement close element in in openElement open element endConnector end connector setEndConnector set end connector Connector connector in in readObject read in in closeElement close element public void read read DOMInput dom input in in throws IOException i o readPoints read point in in readAttributes read attribute in in readLiner read liner in in protected void readLiner read liner DOMInput dom input in in throws IOException i o if in in getElementCount get element count liner liner 0 0 in in openElement open element liner liner liner liner Liner liner in in readObject read in in closeElement close element public void write write DOMOutput dom output out out throws IOException i o writePoints write point out out writeAttributes write attribute out out writeLiner write liner out out protected void writeLiner write liner DOMOutput dom output out out throws IOException i o if liner liner null out out openElement open element liner liner out out writeObject write liner liner out out closeElement close element protected void writePoints write point DOMOutput dom output out out throws IOException i o super writePoints write point out out out out openElement open element startConnector start connector out out writeObject write getStartConnector get start connector out out closeElement close element out out openElement open element endConnector end connector out out writeObject write getEndConnector get end connector out out closeElement close element public void setLiner set liner Liner liner newValue value willChange will change this liner liner newValue value changed change public void basicSetNode basic set node int index index BezierPath bezi path Node node p p if index index 0 0 index index getPointCount get point count 1 1 if getStartConnector get start connector null Point2D point2 d Double start start getStartConnector get start connector findStart find start this if start start null basicSetStartPoint basic set start point start start if getEndConnector get end connector null Point2D point2 d Double end end getEndConnector get end connector findEnd find end this if end end null basicSetEndPoint basic set end point end end super basicSetNode basic set node index index p p public void basicSetPoint basic set point int index index Point2D point2 d Double p p if index index 0 0 index index getPointCount get point count 1 1 if getStartConnector get start connector null Point2D point2 d Double start start getStartConnector get start connector findStart find start this if start start null basicSetStartPoint basic set start point start start if getEndConnector get end connector null Point2D point2 d Double end end getEndConnector get end connector findEnd find end this if end end null basicSetEndPoint basic set end point end end super basicSetPoint basic set point index index p p public void lineout lineout if liner liner null liner liner lineout lineout this FIXME f i x m e Liner liner must must work work with with API a p i of of LineConnection line connection public BezierPath bezi path getBezierPath get bezi path return path path public Liner liner getLiner get liner return liner liner public void setStartPoint set start point Point2D point2 d Double p p setPoint set point 0 0 p p public void setPoint set point int index index Point2D point2 d Double p p setPoint set point index index 0 0 p p public void setEndPoint set end point Point2D point2 d Double p p setPoint set point getPointCount get point count 1 1 p p public void reverseConnection reverse connection if startConnector start connector null endConnector end connector null handleDisconnect handle disconnect startConnector start connector getOwner get owner endConnector end connector getOwner get owner Connector connector tmpC tmp c startConnector start connector startConnector start connector endConnector end connector endConnector end connector tmpC tmp c Point2D point2 d Double tmpP tmp p getStartPoint get start point setStartPoint set start point getEndPoint get end point setEndPoint set end point tmpP tmp p handleConnect handle connect startConnector start connector getOwner get owner endConnector end connector getOwner get owner updateConnection update connection 