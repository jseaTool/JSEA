part bean shell script distribution documentation update may found at http www beanshell sun notice content are subject sun 1 0 may use except compliance available at http www sun com original bean shell initial developer original pat niemey create pat niemey are 2000 all right reserve g n u notice alternatively content may use g n u less l g p l which provision l g p l are applicable instead those above wish allow use your only l g p l allow other use your s p l indicate your decision delete provision above replace them notice other provision require l g p l delete provision above recipient may use your s p l l g p l patrick niemey pat pat net learning o reilly associate http www pat net pat bsh reflect b s h initializ simple node b s h initializ eval call stack callstack interpreter interpreter eval eval initializ ha no base type callstack construct from initializ syntax base type base type no dimensionality dimension top number dimension e g 2 eval base type dimension call stack callstack interpreter interpreter eval num initializer jjt get num child allocate store initializer dima dimension description other dimension zero are assign when value are set dima 0 num initializer initializer instance base type dima evaluate initializer i 0 i num initializer i++ simple node node simple node jjt get child i current initializ node b s h initializ dimension 2 eval invalid location intializ position +i callstack current initializ b s h initializ node eval base type dimension 1 callstack interpreter current initializ node eval callstack interpreter current initializ primitive v o eval initializ position +i callstack determine conversion necessary on initializer quick test conversion apply dimensionality 1 then element initializ primitive boxable type great then value must type there are currently no conversion we on those we conversion on those future then we need get real base type here instead dimensionles one value current initializ dimension 1 we bsh cast here strict able affect cast there when we tighten control value type cast current initializ base type type s t eval e e eval initializ callstack unwrap primitive map etc value primitive unwrap value store value set initializer i value illegal argument e interpreter debug illegal +e type base type current initializ i callstack store e i think happen interpreter debug arraystore +e type base type current initializ i callstack initializer type base type initializ num call stack callstack eval rh type initializ primitive rh type primitive initializ get type get name rh type reflect normalize name initializ get eval incompatible type + rh type + initializ type + base type + at position +arg num callstack 