part bean shell script distribution documentation update may found at http www beanshell sun notice content are subject sun 1 0 may use except compliance available at http www sun com original bean shell initial developer original pat niemey create pat niemey are 2000 all right reserve g n u notice alternatively content may use g n u less l g p l which provision l g p l are applicable instead those above wish allow use your only l g p l allow other use your s p l indicate your decision delete provision above replace them notice other provision require l g p l delete provision above recipient may use your s p l l g p l patrick niemey pat pat net learning o reilly associate http www pat net pat bsh reflect invocation target io print stream target an eval wrap an script call from script target indicate which within script itself wherea eval indicate script cannot evaluate further some reason within script automatically unwrap so look like normal target from eval interpreter eval may unwrap determine what wa target eval throwable target target msg throwable t simple node node call stack callstack msg node callstack target t target throwable t simple node node call stack callstack target t node callstack throwable get target check easy mistake target invocation target invocation target target get target target + target + print target target print stack trace print stack trace err print stack trace print stream out print stack trace out print stack trace debug print stream out debug print stack trace out out target stack trace target print stack trace out generate printable showing wrap target proxy mechanism available allow extend print check undeclar throwable print embed print target throwable t s target capability generate s + + x print target t s extend form print target indirection use print undeclar throwable which are possible when proxy mechanism available we are shield from compile problem using bsh script acceptable here because we re critical path otherwise we d need yet another dynamically load module just x print target throwable t get target reflect undeclar throwable + result \ \ + target undeclar throwable + target target get undeclar throwable + result+ \ nest \ +target + + result interpreter i interpreter i set target t i eval get target eval e interpreter xprintarget +e target wa generate from e g script call into compile which excpetion we distinguish so we print stack trace stack trace would wa generate script e g script explicitly an stack trace would simply point bsh internal which generate 