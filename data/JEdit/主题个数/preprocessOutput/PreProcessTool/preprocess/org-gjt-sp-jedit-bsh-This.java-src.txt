part bean shell script distribution documentation update may found at http www beanshell sun notice content are subject sun 1 0 may use except compliance available at http www sun com original bean shell initial developer original pat niemey create pat niemey are 2000 all right reserve g n u notice alternatively content may use g n u less l g p l which provision l g p l are applicable instead those above wish allow use your only l g p l allow other use your s p l indicate your decision delete provision above replace them notice other provision require l g p l delete provision above recipient may use your s p l l g p l patrick niemey pat pat net learning o reilly associate http www pat net pat bsh type bsh script bsh script context hold namespace reference event listener variou other hold reference declare interpreter callback from outside bsh io serializable runnable namespace reference wrap name space namespace interpreter running when ref wa create s use interpreter callback through where there no current interpreter instance e g proxy event call back from outside bsh interpreter declare interpreter get factory bsh type reference capability reference bsh are dependent up until jdk1 3 dependence wa support different i e different set listener which script be capable implement jdk1 3 reflection proxy mechanism wa introduce which allow u implement arbitrary fantastic thin layer over namespace comprise bsh context we create here only need namespace note could consider slow because way dynamically factory howev i ve also test where i hard factory j no change rough test time reference are also cache name space get name space namespace interpreter declare interpreter capability generate name bsh x capability name bsh j namespace declare interpreter reflect construct namespace declare interpreter e interpreter internal 1 +e get script implement specify type directly complain we t proxy mechanism get cla eval cla instance eval dynamic proxy mechanism available + cannot construct type +cla get script implement specify get ca eval i 0 i ca length i++ ca i instance eval dynamic proxy mechanism available + cannot construct type +ca i i wish access be limited child also scope i want singleton variou child name space namespace interpreter declare interpreter namespace namespace declare interpreter declare interpreter init call stack namespace name space get name space namespace reference bsh + namespace run run 0 eval e declare interpreter runnable + e specify from outside using declare interpreter current namespace call stack indicate being from outside bsh note must still wrap unwrap value using primitive primitive unwrap use outside bean shell bsh primitive name eval callstack one create u name declare interpreter declare only namespace specify interpreter reference callstack caller info p note use outside bsh wish use variable primitive value wrap them using bsh primitive consider using get make your script p also protocol hash equal meta handling last resort p note meta protocol hash want override them script them directly p bsh name interpreter interpreter call stack callstack simple node caller info declare only callstack call stack call stack create initialize namespace declare only then only declare directly namespace visible no inherit visible bsh primitive primitive here generally use outside callback into bsh interpreter e g when we are acting an script listener etc there no real call stack so we make one starting special j v o d e namespace our namespace next name interpreter interpreter call stack callstack simple node caller info declare only eval wrap bit cludge address deficiency generator whereby doe wrap on delegate generator we fix then we remove just generate there oa length i 0 i length i++ oa i i ? primitive n u l l i oa interpreter interpreter declare interpreter callstack callstack call stack namespace caller info caller info simple node j v o d e find bsh type type get type bsh bsh bsh namespace get name type declare only eval e leave bsh bsh interpreter callstack caller info no script name implement require part protocol hash equal these be handle script we must provide impl show we implement name equal hash name equal hash hash equal testing equality reference name equal equal obj 0 obj look handler namespace note duplicate name space get command ok? bsh namespace get eval e leave call script name bsh bsh name interpreter callstack caller info eval + name type + found bsh script + namespace get name caller info callstack bind reference parent s namespace specify declare interpreter also re init callstack s necessary bind reference before use after deserialization use bsh load command p utility because s use bsh command bind interpreter doesn t currently allow access direct small hack bind th name space namespace interpreter declare interpreter th namespace set parent namespace th declare interpreter declare interpreter allow invocation these name on type t give bsh chance override their behavior p pass here invocation actually happen on bsh via regular reflective invocation mechanism then evaluate bsh itself script call expose name name equal get || name equal || name equal get these are necessary let u test synchronization from script || name equal wait || name equal notify || name equal notify all 