bsh just testing enhance statement statement us bsh iterable support iteration over wide variety iterable type j d k 1 1 statement support primitive vector enumeration j d k 1 2 additionally support collection daniel leuck pat niemey b s h enhance statement simple node parser constant var name b s h enhance statement eval call stack callstack interpreter interpreter eval element type simple node expression statement name space enclosing name space callstack top simple node first node simple node jjt get child 0 node count jjt get num child first node b s h type element type b s h type first node get type callstack interpreter expression simple node jjt get child 1 node count 2 statement simple node jjt get child 2 expression first node node count 1 statement simple node jjt get child 1 block name space each name space block name space enclosing name space callstack swap each name space iteratee expression eval callstack interpreter iteratee primitive n u l l eval collection map iterator + enumeration portion statement cannot callstack collection cm collection get collection cm bsh iterable iteratee eval t iterate over type +iteratee get callstack bsh iterator iterator cm get bsh iterator iteratee control primitive v o iterator ha next element type each name space set type variable var name name element type type iterator next value modifier none each name space set variable var name iterator next eval e e eval loop iterator variable + var name callstack breakout eats multi level here? statement empty statement ret statement eval callstack interpreter ret control control ret kind r e t u r n control ret breakout o n t i n u e b r e k breakout breakout callstack swap enclosing name space control 