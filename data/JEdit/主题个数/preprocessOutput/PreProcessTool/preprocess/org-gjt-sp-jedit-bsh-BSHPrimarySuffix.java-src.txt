part bean shell script distribution documentation update may found at http www beanshell sun notice content are subject sun 1 0 may use except compliance available at http www sun com original bean shell initial developer original pat niemey create pat niemey are 2000 all right reserve g n u notice alternatively content may use g n u less l g p l which provision l g p l are applicable instead those above wish allow use your only l g p l allow other use your s p l indicate your decision delete provision above replace them notice other provision require l g p l delete provision above recipient may use your s p l l g p l patrick niemey pat pat net learning o reilly associate http www pat net pat bsh reflect reflect invocation target b s h primary suffix simple node l s s 0 i n d e x 1 n m e 2 p r o p e r t y 3 operation index field b s h primary suffix perform suffix operation on given value p obj node when suffix evaluation begin allow u interpret contextually e g thereaft an value l h s determine l h s p we must handle l h s at each point here p suffix obj l h s call stack callstack interpreter interpreter eval handle suffix operation prefix must b s h type operation l s s obj b s h type l h s eval t assign callstack name space namespace callstack top b s h type obj get type callstack interpreter eval attempt use suffix on non callstack evaluate our prefix need evaluate first first evaluation our prefix mayb node directly from primary prefix eval an s an l h s resolve value note ambiguou name construct now necessary where node may an ambiguou name become common we might want make node someth point we t just eval we need direct evaluation context sensitive type result namely etc obj simple node obj b s h ambiguou name obj b s h ambiguou name obj callstack interpreter obj simple node obj eval callstack interpreter obj l h s obj l h s obj get value eval e e eval callstack operation i n d e x index obj l h s callstack interpreter n m e name obj l h s callstack interpreter p r o p e r t y property l h s obj callstack interpreter interpreter unknown suffix type reflect e eval reflection + e callstack invocation target e target target e get target callstack field access length on invocation must handle l h s each name obj l h s call stack callstack interpreter interpreter eval reflect invocation target length on field equal length obj get l h s eval t assign length callstack primitive get length obj field access jjt get num child 0 l h s reflect get l h s field obj field reflect get field value obj field invocation l h s non l h s evaluation both encounter call oa b s h argument jjt get child 0 get argument callstack interpreter t o d o note block copy from b s h invocation we need factor out common functionality make sure we handle all e g property style access etc maybe move reflect ? reflect obj field oa interpreter callstack reflect e eval invocation + e get message callstack invocation target e msg invocation +field throwable te e get target squeltch stack trace wa cause reflective call back into bsh interpreter e g eval source te eval te target target te target msg te callstack eval e e eval callstack get index aux obj call stack callstack interpreter interpreter simple node caller info eval obj get eval an caller info callstack index index val simple node caller info jjt get child 0 eval callstack interpreter index val primitive index val type cast index val t y p e type s s i g n m e n t index primitive index val value eval e interpreter debug index +e e eval may only index type caller info callstack index index must handle l h s index obj l h s call stack callstack interpreter interpreter eval reflect index get index aux obj callstack interpreter l h s l h s obj index reflect get index obj index eval e e eval callstack property access must handle l h s property l h s obj call stack callstack interpreter interpreter eval obj primitive v o eval attempt access property on undefin variable name callstack obj primitive eval attempt access property on primitive callstack value simple node jjt get child 0 eval callstack interpreter value eval property expression must identifier callstack l h s l h s obj value property style access hashtable map collection cm collection get collection cm map obj val cm get from map obj value key val ? val primitive n u l l val reflect get property obj value eval e e eval property +value callstack reflect e eval no such property + value callstack 