v f s virtual filesystem tab size 4 indent size 4 no tab collapse fold 1 2000 2005 g n u 2 w i t h o u t n y w r r n t y m e r h n t b i l i t y f i t n e s s f o r p r t i u l r p u r p o s e g n u g n u 59 330 m 02111 1307 u s io importsimport j option pane component event queue frame io i o reflect invocation target bufferio io task gui list dialog msg v f s update log task task thread utility runnable queue standard utility j edit s virtual filesystem allow transparently edit store elsewhere than local filesystem example on an f t p site link v f s p note most j edit p i thread safe so special care must take when making j edit p i call also safe call utility wait from work request cause deadlock given runnable then call link wait request v f s 23861 2015 02 12 04 54 35 vanza v f s service type link service since j edit 4 2pre1 s e r v i e io v f s init call init start call start runnable queue i n s t n e start v f s get v f s local filesystem v f s since j edit 2 5pre1 v f s get v f s v f s get url v f s u r l v f s since j edit 2 5pre1 v f s get url v f s url v f s get v f s protocol v f s specify protocol protocol protocol since j edit 2 5pre1 v f s get v f s protocol protocol protocol equal v f s v f s vf v f s service get service s e r v i e protocol vf vf url v f s get v f s path v f s specify path path path since j edit 2 6pre4 v f s get v f s path path misc utility u r l path get v f s protocol misc utility get protocol u r l path v f s get v f s list all register filesystem since j edit 4 2pre1 get v f s sooner ppl move api les we ll need crap like list value link list p i service get service name s e r v i e p i collection add all value p i value value size i o request wait request when all pend request are complete must call event dispatch thread since j edit 2 5pre1 wait request event queue dispatch thread illegal state task instance wait io task occur last request cause an occur get request count number pend i o request get request count task instance count io task run w t thread execute specify runnable w t thread once all pend i o request are complete only one runnable execute directly when current thread e d t there are no i o request active queue at moment call since j edit 2 5pre1 deprecate using when run task w t thread wait all background task causing some unwant delay need calling task after background work please add your runnable e d t thread yourself at end background task thread utility run dispatch thread runnable thread utility run dispatch thread wait runnable deprecate run w t thread runnable run runnable queue i n s t n e run after io task run run work thread execute specify runnable one i o thread since j edit 2 6pre2 deprecate use threadpool link w t thread work thread thread utility run background task thread utility run background runnable deprecate run work thread task run run io task illegal argument thread utility run background run handle an i o since j edit 4 3pre3 i o e path component comp log log log e r r o r v f s e v f s comp path ioerror e report an i o urgency log e r r o r comp component path path name cause message prop message property name positional since j edit 4 0pre3 component comp path message prop comp path message prop log e r r o r report an i o comp component path path name cause message prop message property name positional urgency logging urgency level since j edit 5 0pre1 component comp path message prop urgency runnable r runnable override run frame frame j option pane get frame component comp lock add list dialog entry path message prop urgency size 1 display active thread utility run background display frame thread utility run dispatch thread wait r send v f s update send v f s update message vf v f s path path change parent an update sent path s parent too since j edit 2 6pre4 send v f s update v f s vf path parent parent send v f s update vf vf get parent path path send v f s update vf path hack until v f s path write path length 1 path end || path end io separator path path substring 0 path length 1 vf update lock v f s update msg vf update msg get path equal path t send two update same path vf update add v f s update path vf update size 1 we be first add an update add update sending runnable w t thread runnable queue i n s t n e run after io task send v f s update safely send v f s update safely send v f s update safely runnable run vf update lock vf browser ha what might call design flaw doesn t update properly unles vf update parent arrive before update child sorting list alphanumerically guarantee collection sort vf update standard utility compare v f s update v f s update vf update vf update edit bus send vf update vf update clear member variable v f s v f s v f s url v f s lock vector list dialog entry vf update lock list v f s update vf update an indicator wheth display active access lock display active initializ vector list dialog entry v f s v f s url v f s url v f s vf update list v f s update 10 display display runnable frame frame display frame frame frame frame show dialog frame frame vector list dialog entry event queue wait runnable run caption j edit get property ioerror caption + size 1 ? 1 value size list dialog frame showing ? frame j edit get first view j edit get property ioerror title caption interrupt ie preserve interruption flag t stop thread current thread interrupt invocation target ite log log log e r r o r display ite run lock 2 thread might be spawn simultaneously display active display active loop only when size 0 lock size 0 display active we know there are let s wait bit maybe there are accumulating? we ll stay here until they stop coming out err count1 1 err count2 0 err count1 err count2 vector vector are err count1 size thread sleep 200 interrupt ie we t stop we display howev flag must preserve thread current thread interrupt since someone u let s exit waiting loop err count2 size didn t appear let s display those which we already dialog display there may arrive next so we stay loop vector list dialog entry lock vector list dialog entry clear show dialog frame v f s 