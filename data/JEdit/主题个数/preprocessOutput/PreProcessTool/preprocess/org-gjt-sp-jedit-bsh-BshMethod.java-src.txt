part bean shell script distribution documentation update may found at http www beanshell sun notice content are subject sun 1 0 may use except compliance available at http www sun com original bean shell initial developer original pat niemey create pat niemey are 2000 all right reserve g n u notice alternatively content may use g n u less l g p l which provision l g p l are applicable instead those above wish allow use your only l g p l allow other use your s p l indicate your decision delete provision above replace them notice other provision require l g p l delete provision above recipient may use your s p l l g p l patrick niemey pat pat net learning o reilly associate http www pat net pat bsh reflect reflect invocation target represent an instance bsh declaration namespace thin wrapper around b s h declaration pointer declare namespace p when locate subordinate namespace from an arbitrary namespace must nontheles execute it context which wa declare p note incorrectly cache structure need clear when classload change bsh io serializable namespace which set back reference node which need execute namespace necessary declare because we only save part our namespace anyway currently name space declare name space begin component modifier modifier name creturn type argument name num cparam type script body b s h block body bsh delegate real end component bsh b s h declaration name space declare name space modifier modifier name type node get name node type block node declare name space modifier bsh name type name type b s h block body name space declare name space modifier modifier name name creturn type type name name name num name length cparam type type body body declare name space declare name space modifier modifier create bsh delegate real upon invocation use represent bsh get name get type name get parameter type block declare name space modifier get argument type loosely type untyp argument represent argument type note bshmethod need re evaluate type here get parameter type cparam type get parameter name name get type loosely type value t y p e type type note bshmethod need re evaluate type here get type creturn type modifier get modifier modifier get name name declare specify argument interpreter reference simple form bsh intend use reflective style access bsh script value interpreter interpreter eval value interpreter bsh specify interpreter ref callstack caller info node represent invocation use primarily debug order provide access text construct through namespace caller info bean shell s t node represent invocation use print line number text eval node here message may able point precise location text callstack callstack callstack one create declare namespace on top stack i e look purpose invocation like call occur declare enclosing namespace which define value interpreter interpreter call stack callstack simple node caller info eval value interpreter callstack caller info bsh specify interpreter ref callstack caller info node represent invocation use primarily debug order provide access text construct through namespace caller info bean shell s t node represent invocation use print line number text eval node here message may able point precise location text callstack callstack callstack one create declare namespace on top stack i e look purpose invocation like call occur declare enclosing namespace which define override name space when execute namespace on top stack instead create it own local namespace allow use constructor value interpreter interpreter call stack callstack simple node caller info override name space eval value i 0 i value length i++ value i h e r e reflect value reflect e eval +e caller info callstack invocation target e2 target e2 caller info callstack syncrhoniz method? modifier modifier ha modifier lock our declare namespace s reference s s instance lock declare name space lock declare name space get instance eval e interpreter t get instance lock declare name space get interpreter ??? lock impl value interpreter callstack caller info override name space impl value interpreter callstack caller info override name space impl value interpreter interpreter call stack callstack simple node caller info override name space eval type get type type get parameter type callstack callstack callstack call stack declare name space value value cardinality number mismatch value length num look help check namespace here help declare name space get bsh help +name interpreter interpreter help primitive v o e eval eval wrong number argument local + name caller info callstack make local namespace invocation name space local name space override name space local name space callstack top local name space name space declare name space name local name space we both above? local name space set node caller info set local namespace i 0 i num i++ set type variable type i value i type get assignable form value i type i type cast value i type i type s s i g n m e n t eval e eval invalid argument + ` +param name i + + + name + + e get message caller info callstack local name space set type variable name i type i value i modifier eval e2 e2 eval type parameter assignment caller info callstack set untyp variable untyp get assignable would type value i primitive v o eval undefin variable name parameter + name i + + name caller info callstack local name space set local variable name i value i interpreter get strict eval e3 e3 eval caller info callstack push namespace on call stack override name space callstack push local name space block override namespace local name space ret body eval callstack interpreter override save callstack include call just mess call stack stack callstack get back caller namespace override name space callstack pop control ret control ret control ret control control ret body only use statment type control ret control kind ret control r e t u r n ret control ret value ret control point node statement eval body ret control point stack check value from type ret control point node statement type t y p e ret primitive v o eval cannot value from ret control point stack type type value type t y p e primitive v o type ret type get assignable form ret type type cast ret type type s s i g n m e n t eval e point statement point we have one wa implicit return? what s here? simple node node caller info ret control node ret control point e eval incorrect type from + name + e get message node callstack ret ha modifier name modifier modifier ha modifier name script + name get parameter type 