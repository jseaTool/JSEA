part bean shell script distribution documentation update may found at http www beanshell sun notice content are subject sun 1 0 may use except compliance available at http www sun com original bean shell initial developer original pat niemey create pat niemey are 2000 all right reserve g n u notice alternatively content may use g n u less l g p l which provision l g p l are applicable instead those above wish allow use your only l g p l allow other use your s p l indicate your decision delete provision above replace them notice other provision require l g p l delete provision above recipient may use your s p l l g p l patrick niemey pat pat net learning o reilly associate http www pat net pat bsh implement binary expression note too complicate need some cleanup simplification suppres warning fallthrough b s h binary expression simple node parser constant kind b s h binary expression eval call stack callstack interpreter interpreter eval lh simple node jjt get child 0 eval callstack interpreter instanceof? next node type kind i n s t n e o f ref instance type lh primitive n u l l primitive rh b s h type jjt get child 1 get type callstack interpreter primitive number cannot test lh primitive eval cannot instance primitive type primitive number normally an anyth internal use we ll test bsh primitive i e 5 bsh primitive lh primitive rh bsh primitive primitive primitive performe base on assignability ret type base assignable rh lh get primitive ret following two check be tack on could probably smooth out look ahead circuit evaluation rh we re n d lh kind b o o l n d || kind b o o l n d x obj lh primitive value lh obj primitive lh get value obj obj value primitive look ahead circuit evaluation rh we re n d lh kind b o o l o r || kind b o o l o r x obj lh primitive value lh obj primitive lh get value obj obj value primitive end stuff wa tack on circuit are both lh rh wrapper primitive values? binary op lh wrapper wrapper lh rh simple node jjt get child 1 eval callstack interpreter rh wrapper wrapper rh lh wrapper || primitive value lh rh wrapper || primitive value rh special e q on two wrapper lh wrapper rh wrapper kind e q t auto unwrap wrapper preserve identity semantics f l l t h r o u g h t o o b j e t o p e r t i o n s b e l o w primitive binary operation lh rh kind eval e e eval callstack following make hard use untyp var e g what primitive? answer we test only var type ? need get info here we mixture primitive value non primitive ? primitive value prim count 0 primitive value lh ++prim count primitive value rh ++prim count prim count 1 both primitive type be handle above interpreter here prim count 1 mixture one other eval operator + token image kind + inappropriate primitive combination callstack fall through handle both non primitive type end check primitive non primitive mix treat lh rh arbitrary operation include n u l l v o represent their primitive type out binary op arbitrary obj +lhs+ +rhs+ kind e q primitive lh rh n e primitive lh rh p l u s lh || rh lh + rh f l l t h r o u g h t o d e f u l t s e lh primitive || rh primitive lh primitive v o || rh primitive v o eval illegal use undefin variable literal callstack lh primitive n u l l || rh primitive n u l l eval illegal use value literal callstack eval operator + token image kind + inappropriate callstack non non primitive type primitive value obj obj primitive obj primitive v o obj primitive n u l l wrapper number type wrapper obj obj || obj character || obj number 