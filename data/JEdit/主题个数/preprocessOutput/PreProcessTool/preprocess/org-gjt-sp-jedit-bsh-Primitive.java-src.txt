part bean shell script distribution documentation update may found at http www beanshell sun notice content are subject sun 1 0 may use except compliance available at http www sun com original bean shell initial developer original pat niemey create pat niemey are 2000 all right reserve g n u notice alternatively content may use g n u less l g p l which provision l g p l are applicable instead those above wish allow use your only l g p l allow other use your s p l indicate your decision delete provision above replace them notice other provision require l g p l delete provision above recipient may use your s p l l g p l patrick niemey pat pat net learning o reilly associate http www pat net pat bsh hashtable wrapper primitive type bsh because use some bsh command note l h s about wrapping note because we may test primitive place we need change search those test suppres warning uncheck primitive parser constant io serializable hashtable primitive wrapper hashtable hashtable wrapper primitive hashtable primitive wrapper put t y p e primitive wrapper put t y p e primitive wrapper put t y p e primitive wrapper put character t y p e character primitive wrapper put t y p e primitive wrapper put t y p e primitive wrapper put t y p e primitive wrapper put t y p e wrapper primitive put t y p e wrapper primitive put t y p e wrapper primitive put t y p e wrapper primitive put character character t y p e wrapper primitive put t y p e wrapper primitive put t y p e wrapper primitive put t y p e wrapper primitive put t y p e hashtable wrapper map hashtable wrapper map put t y p e wrapper map put t y p e wrapper map put t y p e wrapper map put character t y p e character wrapper map put t y p e wrapper map put t y p e wrapper map put t y p e wrapper map put t y p e wrapper map put t y p e wrapper map put t y p e wrapper map put t y p e wrapper map put character character t y p e wrapper map put t y p e wrapper map put t y p e wrapper map put t y p e wrapper map put t y p e primitive value store it wrapper value special io serializable special special n u l l v l u e special special v o t y p e special n u l l mean no value ia placeholder primitive value primitive n u l l primitive special n u l l v l u e v o mean no type strictly speaking make no sense here practical reason we ll consider lack type special value primitive v o primitive special v o t y p e prevent invocation isn t primitive wrapper primitive value value interpreter use primitve n u l l instead primitive value special n u l l v l u e value special v o t y p e wrapper type value get interpreter wrapper type +value value value primitive value value primitive value value primitive value value primitive value character value primitive value value primitive value value primitive value value primitive value value primitive value store it wrapper get value value special n u l l v l u e value special v o t y p e interpreter attempt unwrap type value value special n u l l v l u e value special v o t y p e value get correspond primitive t y p e primitive primitive t y p e type value t y p e primitive v o value type primitive n u l l get type primitive v o t y p e n u l l type we currently use type indicate loose typing throughout bsh primitive n u l l unbox type value get perform binary operation on two primitive wrapper type both original be primitive primitive result wa mix wrapper primitive wrapper type operation where we primitive type way binary operation obj1 obj2 kind eval special primitive type obj1 n u l l || obj2 n u l l eval value literal binary operation obj1 v o || obj2 v o eval undefin variable literal binary operation keep track original type lh type obj1 get rh type obj2 get unwrap primitive obj1 primitive obj1 primitive obj1 get value obj2 primitive obj2 primitive obj2 get value operand promote primitive obj1 obj2 lh operand 0 rh operand 1 lh get rh get eval type mismatch operator + lh get + cannot use + rh get result result binary operation impl lh rh kind arithmetic e target arithemetic binary op e both original be primitive primitive result wa mix wrapper primitive wrapper type result primitive lh type primitive rh type primitive || result primitive result result binary operation impl lh rh kind eval lh binary operation lh rh kind lh binary operation lh rh kind lh binary operation lh rh kind lh binary operation lh rh kind lh binary operation lh rh kind eval invalid type binary operator binary operation b1 b2 kind lh b1 value rh b2 value kind e q lh rh n e lh rh b o o l o r b o o l o r x lh || rh b o o l n d b o o l n d x lh rh interpreter unimplement binary operator covering both type binary operation l1 l2 kind lh l1 value rh l2 value kind l t l t x lh rh g t g t x lh rh e q lh rh l e l e x lh rh g e g e x lh rh n e lh rh arithmetic p l u s lh + rh m i n u s lh rh s t r lh rh s l s h lh rh m o d lh % rh bitwise l s h i f t l s h i f t x lh rh r s i g n e d s h i f t r s i g n e d s h i f t x lh rh r u n s i g n e d s h i f t r u n s i g n e d s h i f t x lh rh b i t n d b i t n d x lh rh b i t o r b i t o r x lh | rh x o r lh ^ rh interpreter unimplement binary operator covering both type binary operation i1 i2 kind lh i1 value rh i2 value kind l t l t x lh rh g t g t x lh rh e q lh rh l e l e x lh rh g e g e x lh rh n e lh rh arithmetic p l u s lh + rh m i n u s lh rh s t r lh rh s l s h lh rh m o d lh % rh bitwise l s h i f t l s h i f t x lh rh r s i g n e d s h i f t r s i g n e d s h i f t x lh rh r u n s i g n e d s h i f t r u n s i g n e d s h i f t x lh rh b i t n d b i t n d x lh rh b i t o r b i t o r x lh | rh x o r lh ^ rh interpreter unimplement binary operator covering both type binary operation d1 d2 kind eval lh d1 value rh d2 value kind l t l t x lh rh g t g t x lh rh e q lh rh l e l e x lh rh g e g e x lh rh n e lh rh arithmetic p l u s lh + rh m i n u s lh rh s t r lh rh s l s h lh rh m o d lh % rh t shift floating point value l s h i f t l s h i f t x r s i g n e d s h i f t r s i g n e d s h i f t x r u n s i g n e d s h i f t r u n s i g n e d s h i f t x eval t shift interpreter unimplement binary operator covering both type binary operation f1 f2 kind eval lh f1 value rh f2 value kind l t l t x lh rh g t g t x lh rh e q lh rh l e l e x lh rh g e g e x lh rh n e lh rh arithmetic p l u s lh + rh m i n u s lh rh s t r lh rh s l s h lh rh m o d lh % rh t shift l s h i f t l s h i f t x r s i g n e d s h i f t r s i g n e d s h i f t x r u n s i g n e d s h i f t r u n s i g n e d s h i f t x eval t shift interpreter unimplement binary operator promote primitive wrapper type wrapper type promote wrapper wrapper character character wrapper value wrapper || wrapper number wrapper value wrapper promote pair primitive maximum type two e g promote primitive lh rh lh promote lh rh promote rh lh number rh number number lnum number lh number rnum number rh b b lnum || rnum b rh rnum value lh lnum value b lnum || rnum b rh rnum value lh lnum value b lnum || rnum b rh rnum value lh lnum value lh rh primitive unary operation primitive val kind eval val n u l l eval illegal use literal val v o eval illegal use undefin literal operand type val get type operand promote val get value operand primitive unary operation operand kind operand result unary operation operand kind ++ must cast back original type kind i n r || kind d e r operand type t y p e primitive result operand type t y p e primitive result operand type character t y p e primitive result primitive result operand primitive unary operation operand kind operand primitive unary operation operand kind operand primitive unary operation operand kind interpreter an occur please call technical support unary operation b kind eval operand b value kind b n g operand eval operator inappropriate unary operation i kind operand i value kind p l u s operand m i n u s operand t i l d e operand i n r operand + 1 d e r operand 1 interpreter bad unary operation unary operation l kind operand l value kind p l u s operand m i n u s operand t i l d e operand i n r operand + 1 d e r operand 1 interpreter bad unary operation unary operation f kind operand f value kind p l u s operand m i n u s operand interpreter bad unary operation unary operation d kind operand d value kind p l u s operand m i n u s operand interpreter bad unary operation value eval value number number value value eval primitive number value eval value value value eval primitive determine primitive numeric type i e include number value n u l l v o number number value eval value value promote character number type these purpose value character value character value value value number number value eval primitive number primitive compare equal other primitive contain an equal wrap value equal obj obj primitive primitive obj value equal value hash primitive tie hash wrap value shift so they are same hash value hash 21 arbitrary unwrap primitive value map non primitive type remain unchang obj type which may bsh primitive correspond normal type unwrap bsh primitive type their wrapper type unwrap obj map outside world obj primitive v o unwrap primitive obj primitive primitive obj get value obj unwrap primitive wrapper their wrapper value e g primitive 42 become 42 unwrap unwrap oa length i 0 i length i++ oa i unwrap i oa wrap type oa length i 0 i length i++ oa i wrap i type i oa wrap primitive value indicate type primitive value primitive are left unchang primitive value are represent their wrap value value p value map primitive n u l l value specify type t y p e map primitive v o wrap value type type t y p e primitive v o value primitive n u l l type primitive primitive value value get appropriate value p j l s 4 5 4 primitive get value type type || type primitive primitive n u l l type t y p e primitive non primitive get appropriate flavor zero primitive 0 cast type type type s t eval e interpreter bad cast get correspond wrapper primitive t y p e e g t y p e box type primitive type wrapper map get primitive type interpreter primitive type + primitive type get correspond primitive t y p e wrapper type e g t y p e unbox type wrapper type wrapper map get wrapper type interpreter primitive wrapper type +wrapp type cast bsh primitive value bsh primitive value usually numeric type cast other include cast boolen cast type remains attempt cast cause an type primitive t y p e primitive cast type type operation eval cast primitive type get type from type from value check only operation cast check cast primitive type another type normally both type are primitive e g numeric value no type may cast type p type target type cast normally primitive t y p e cast type from type primitive t y p e type primitive cast indicate from value wa from value optionally value convert check only from value must check only from value must non primitive n u l l course valid primitive cast primitive type from type primitive from value check only operation eval lot precondition check here once thing are running smoothly we might comment these out s what assertion are check only from value interpreter bad cast 1 check only from value interpreter bad cast 2 from type from type primitive interpreter bad from type +from type from value primitive n u l l from type interpreter inconsistent 1 from value primitive v o from type t y p e interpreter inconsistent 2 t cast anyth from type t y p e check only type i n v l s t type cast reflect normalize name type value operation unwrap primitive from value it wrapper value etc value from value value from value get value type primitive cast primitive type? from type check only type i n v l s t type cast primitive type + type value operation fall through cast primitive an type primitive n u l l cast type from type check only ? type v l s t primitive n u l l check only type i n v l s t type cast type + type primitive value operation only cast from type t y p e type t y p e check only type i n v l s t type cast type from type operation check only ? type v l s t from value numeric cast only allow legal assignment unles we re s t operation operation type s s i g n m e n t type assignable type from type check only type i n v l s t type cast type from type operation check only ? type v l s t primitive cast wrapper type value wrapper type type wrapper map get type type primitive cast primitive value represent it wrapper type specify wrapper type e g 5 5 5 5 type t y p e type value value wrapper value may cast wrapper type value type primitive interpreter invalid type cast wrapper +to type value interpreter value cast wrapper guard value type t y p e interpreter bad wrapper cast value first promote number type avoid duplicate value character value character value value value number interpreter bad type cast number number number value type t y p e number value type t y p e number value type character t y p e character number value type t y p e number value type t y p e number value type t y p e number value type t y p e number value interpreter wrapper cast 