part bean shell script distribution documentation update may found at http www beanshell sun notice content are subject sun 1 0 may use except compliance available at http www sun com original bean shell initial developer original pat niemey create pat niemey are 2000 all right reserve g n u notice alternatively content may use g n u less l g p l which provision l g p l are applicable instead those above wish allow use your only l g p l allow other use your s p l indicate your decision delete provision above replace them notice other provision require l g p l delete provision above recipient may use your s p l l g p l patrick niemey pat pat net learning o reilly associate http www pat net pat bsh vector suppres warning uncheck b s h statement simple node b s h statement eval call stack callstack interpreter interpreter eval b s h block block b s h block jjt get child 0 vector vector vector block vector nchild jjt get num child node node i 1 i nchild node jjt get child i++ b s h formal parameter add element node block add element jjt get child i++ node finaly block b s h block block node block b s h block node why both these? target target throwable ret evaluate content block result target generate script we save callstack depth an we pop back depth before contiu circuit intervene context pop note we stack info what we it? append message? callstack depth callstack depth ret block eval callstack interpreter target e target e stack info bsh stack callstack depth callstack depth stack info + + callstack pop + unwrap target target target get target we an find n size i 0 i n i++ get block b s h formal parameter fp b s h formal parameter element at i cache subject classload change message evaluation formal parameter simply resolve it type via specify namespace doesn t namespace fp eval callstack interpreter fp type interpreter get strict eval strict untyp block callstack type check assignability fp type throwable type cast rsh fp type lh type type s s i g n m e n t eval e mismatch next note innefficient an assignable from doesn t t o d o we now way test assignment cast use it? found match execute block b s h block cb b s h block block element at i prepare execute block we must create block name space hold parameter swap on stack after initialize name space enclosing name space callstack top block name space cb name space block name space enclosing name space fp type b s h formal parameter u n t y p e d set an untyp variable directly block cb name space set block variable fp name set type variable directly block modifier modifier modifier cb name space set type variable fp name fp type modifier none eval e interpreter unable set var block namespace put cb name space on top stack callstack swap cb name space ret cb eval callstack interpreter put back callstack swap enclosing name space target handle target evaluate block block ret block eval callstack interpreter fell through upward target target ret control ret primitive v o 